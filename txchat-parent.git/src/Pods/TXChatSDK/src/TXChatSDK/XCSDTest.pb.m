// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "XCSDTest.pb.h"
// @@protoc_insertion_point(imports)

@implementation XCSDPBXcsdtestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [XCSDPBXcsdtestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [XCSDPBXcsdgameRoot registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface XCSDPBGameTestRequest ()
@property SInt64 userId;
@end

@implementation XCSDPBGameTestRequest

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
  }
  return self;
}
static XCSDPBGameTestRequest* defaultXCSDPBGameTestRequestInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBGameTestRequest class]) {
    defaultXCSDPBGameTestRequestInstance = [[XCSDPBGameTestRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBGameTestRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBGameTestRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt64:1 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeInt64Size(1, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBGameTestRequest*) parseFromData:(NSData*) data {
  return (XCSDPBGameTestRequest*)[[[XCSDPBGameTestRequest builder] mergeFromData:data] build];
}
+ (XCSDPBGameTestRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameTestRequest*)[[[XCSDPBGameTestRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameTestRequest*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBGameTestRequest*)[[[XCSDPBGameTestRequest builder] mergeFromInputStream:input] build];
}
+ (XCSDPBGameTestRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameTestRequest*)[[[XCSDPBGameTestRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameTestRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBGameTestRequest*)[[[XCSDPBGameTestRequest builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBGameTestRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameTestRequest*)[[[XCSDPBGameTestRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameTestRequestBuilder*) builder {
  return [[XCSDPBGameTestRequestBuilder alloc] init];
}
+ (XCSDPBGameTestRequestBuilder*) builderWithPrototype:(XCSDPBGameTestRequest*) prototype {
  return [[XCSDPBGameTestRequest builder] mergeFrom:prototype];
}
- (XCSDPBGameTestRequestBuilder*) builder {
  return [XCSDPBGameTestRequest builder];
}
- (XCSDPBGameTestRequestBuilder*) toBuilder {
  return [XCSDPBGameTestRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBGameTestRequest class]]) {
    return NO;
  }
  XCSDPBGameTestRequest *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBGameTestRequestBuilder()
@property (strong) XCSDPBGameTestRequest* resultGameTestRequest;
@end

@implementation XCSDPBGameTestRequestBuilder
@synthesize resultGameTestRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameTestRequest = [[XCSDPBGameTestRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameTestRequest;
}
- (XCSDPBGameTestRequestBuilder*) clear {
  self.resultGameTestRequest = [[XCSDPBGameTestRequest alloc] init];
  return self;
}
- (XCSDPBGameTestRequestBuilder*) clone {
  return [XCSDPBGameTestRequest builderWithPrototype:resultGameTestRequest];
}
- (XCSDPBGameTestRequest*) defaultInstance {
  return [XCSDPBGameTestRequest defaultInstance];
}
- (XCSDPBGameTestRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBGameTestRequest*) buildPartial {
  XCSDPBGameTestRequest* returnMe = resultGameTestRequest;
  self.resultGameTestRequest = nil;
  return returnMe;
}
- (XCSDPBGameTestRequestBuilder*) mergeFrom:(XCSDPBGameTestRequest*) other {
  if (other == [XCSDPBGameTestRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBGameTestRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBGameTestRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultGameTestRequest.hasUserId;
}
- (SInt64) userId {
  return resultGameTestRequest.userId;
}
- (XCSDPBGameTestRequestBuilder*) setUserId:(SInt64) value {
  resultGameTestRequest.hasUserId = YES;
  resultGameTestRequest.userId = value;
  return self;
}
- (XCSDPBGameTestRequestBuilder*) clearUserId {
  resultGameTestRequest.hasUserId = NO;
  resultGameTestRequest.userId = 0L;
  return self;
}
@end

@interface XCSDPBGameTestResponse ()
@property SInt64 testId;
@property BOOL isFirstTest;
@property (strong) NSMutableArray * gameLevelArray;
@property SInt64 userId;
@end

@implementation XCSDPBGameTestResponse

- (BOOL) hasTestId {
  return !!hasTestId_;
}
- (void) setHasTestId:(BOOL) _value_ {
  hasTestId_ = !!_value_;
}
@synthesize testId;
- (BOOL) hasIsFirstTest {
  return !!hasIsFirstTest_;
}
- (void) setHasIsFirstTest:(BOOL) _value_ {
  hasIsFirstTest_ = !!_value_;
}
- (BOOL) isFirstTest {
  return !!isFirstTest_;
}
- (void) setIsFirstTest:(BOOL) _value_ {
  isFirstTest_ = !!_value_;
}
@synthesize gameLevelArray;
@dynamic gameLevel;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (instancetype) init {
  if ((self = [super init])) {
    self.testId = 0L;
    self.isFirstTest = NO;
    self.userId = 0L;
  }
  return self;
}
static XCSDPBGameTestResponse* defaultXCSDPBGameTestResponseInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBGameTestResponse class]) {
    defaultXCSDPBGameTestResponseInstance = [[XCSDPBGameTestResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBGameTestResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBGameTestResponseInstance;
}
- (NSArray *)gameLevel {
  return gameLevelArray;
}
- (XCSDPBGameLevel*)gameLevelAtIndex:(NSUInteger)index {
  return [gameLevelArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTestId) {
    return NO;
  }
  if (!self.hasIsFirstTest) {
    return NO;
  }
  __block BOOL isInitgameLevel = YES;
   [self.gameLevel enumerateObjectsUsingBlock:^(XCSDPBGameLevel *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgameLevel = NO;
      *stop = YES;
    }
  }];
  if (!isInitgameLevel) return isInitgameLevel;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTestId) {
    [output writeInt64:1 value:self.testId];
  }
  if (self.hasIsFirstTest) {
    [output writeBool:2 value:self.isFirstTest];
  }
  [self.gameLevelArray enumerateObjectsUsingBlock:^(XCSDPBGameLevel *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasUserId) {
    [output writeInt64:4 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTestId) {
    size_ += computeInt64Size(1, self.testId);
  }
  if (self.hasIsFirstTest) {
    size_ += computeBoolSize(2, self.isFirstTest);
  }
  [self.gameLevelArray enumerateObjectsUsingBlock:^(XCSDPBGameLevel *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasUserId) {
    size_ += computeInt64Size(4, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBGameTestResponse*) parseFromData:(NSData*) data {
  return (XCSDPBGameTestResponse*)[[[XCSDPBGameTestResponse builder] mergeFromData:data] build];
}
+ (XCSDPBGameTestResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameTestResponse*)[[[XCSDPBGameTestResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameTestResponse*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBGameTestResponse*)[[[XCSDPBGameTestResponse builder] mergeFromInputStream:input] build];
}
+ (XCSDPBGameTestResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameTestResponse*)[[[XCSDPBGameTestResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameTestResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBGameTestResponse*)[[[XCSDPBGameTestResponse builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBGameTestResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameTestResponse*)[[[XCSDPBGameTestResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameTestResponseBuilder*) builder {
  return [[XCSDPBGameTestResponseBuilder alloc] init];
}
+ (XCSDPBGameTestResponseBuilder*) builderWithPrototype:(XCSDPBGameTestResponse*) prototype {
  return [[XCSDPBGameTestResponse builder] mergeFrom:prototype];
}
- (XCSDPBGameTestResponseBuilder*) builder {
  return [XCSDPBGameTestResponse builder];
}
- (XCSDPBGameTestResponseBuilder*) toBuilder {
  return [XCSDPBGameTestResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"testId", [NSNumber numberWithLongLong:self.testId]];
  }
  if (self.hasIsFirstTest) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFirstTest", [NSNumber numberWithBool:self.isFirstTest]];
  }
  [self.gameLevelArray enumerateObjectsUsingBlock:^(XCSDPBGameLevel *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameLevel"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTestId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.testId] forKey: @"testId"];
  }
  if (self.hasIsFirstTest) {
    [dictionary setObject: [NSNumber numberWithBool:self.isFirstTest] forKey: @"isFirstTest"];
  }
  for (XCSDPBGameLevel* element in self.gameLevelArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"gameLevel"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBGameTestResponse class]]) {
    return NO;
  }
  XCSDPBGameTestResponse *otherMessage = other;
  return
      self.hasTestId == otherMessage.hasTestId &&
      (!self.hasTestId || self.testId == otherMessage.testId) &&
      self.hasIsFirstTest == otherMessage.hasIsFirstTest &&
      (!self.hasIsFirstTest || self.isFirstTest == otherMessage.isFirstTest) &&
      [self.gameLevelArray isEqualToArray:otherMessage.gameLevelArray] &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.testId] hash];
  }
  if (self.hasIsFirstTest) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFirstTest] hash];
  }
  [self.gameLevelArray enumerateObjectsUsingBlock:^(XCSDPBGameLevel *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBGameTestResponseBuilder()
@property (strong) XCSDPBGameTestResponse* resultGameTestResponse;
@end

@implementation XCSDPBGameTestResponseBuilder
@synthesize resultGameTestResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameTestResponse = [[XCSDPBGameTestResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameTestResponse;
}
- (XCSDPBGameTestResponseBuilder*) clear {
  self.resultGameTestResponse = [[XCSDPBGameTestResponse alloc] init];
  return self;
}
- (XCSDPBGameTestResponseBuilder*) clone {
  return [XCSDPBGameTestResponse builderWithPrototype:resultGameTestResponse];
}
- (XCSDPBGameTestResponse*) defaultInstance {
  return [XCSDPBGameTestResponse defaultInstance];
}
- (XCSDPBGameTestResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBGameTestResponse*) buildPartial {
  XCSDPBGameTestResponse* returnMe = resultGameTestResponse;
  self.resultGameTestResponse = nil;
  return returnMe;
}
- (XCSDPBGameTestResponseBuilder*) mergeFrom:(XCSDPBGameTestResponse*) other {
  if (other == [XCSDPBGameTestResponse defaultInstance]) {
    return self;
  }
  if (other.hasTestId) {
    [self setTestId:other.testId];
  }
  if (other.hasIsFirstTest) {
    [self setIsFirstTest:other.isFirstTest];
  }
  if (other.gameLevelArray.count > 0) {
    if (resultGameTestResponse.gameLevelArray == nil) {
      resultGameTestResponse.gameLevelArray = [[NSMutableArray alloc] initWithArray:other.gameLevelArray];
    } else {
      [resultGameTestResponse.gameLevelArray addObjectsFromArray:other.gameLevelArray];
    }
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBGameTestResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBGameTestResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTestId:[input readInt64]];
        break;
      }
      case 16: {
        [self setIsFirstTest:[input readBool]];
        break;
      }
      case 26: {
        XCSDPBGameLevelBuilder* subBuilder = [XCSDPBGameLevel builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGameLevel:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setUserId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasTestId {
  return resultGameTestResponse.hasTestId;
}
- (SInt64) testId {
  return resultGameTestResponse.testId;
}
- (XCSDPBGameTestResponseBuilder*) setTestId:(SInt64) value {
  resultGameTestResponse.hasTestId = YES;
  resultGameTestResponse.testId = value;
  return self;
}
- (XCSDPBGameTestResponseBuilder*) clearTestId {
  resultGameTestResponse.hasTestId = NO;
  resultGameTestResponse.testId = 0L;
  return self;
}
- (BOOL) hasIsFirstTest {
  return resultGameTestResponse.hasIsFirstTest;
}
- (BOOL) isFirstTest {
  return resultGameTestResponse.isFirstTest;
}
- (XCSDPBGameTestResponseBuilder*) setIsFirstTest:(BOOL) value {
  resultGameTestResponse.hasIsFirstTest = YES;
  resultGameTestResponse.isFirstTest = value;
  return self;
}
- (XCSDPBGameTestResponseBuilder*) clearIsFirstTest {
  resultGameTestResponse.hasIsFirstTest = NO;
  resultGameTestResponse.isFirstTest = NO;
  return self;
}
- (NSMutableArray *)gameLevel {
  return resultGameTestResponse.gameLevelArray;
}
- (XCSDPBGameLevel*)gameLevelAtIndex:(NSUInteger)index {
  return [resultGameTestResponse gameLevelAtIndex:index];
}
- (XCSDPBGameTestResponseBuilder *)addGameLevel:(XCSDPBGameLevel*)value {
  if (resultGameTestResponse.gameLevelArray == nil) {
    resultGameTestResponse.gameLevelArray = [[NSMutableArray alloc]init];
  }
  [resultGameTestResponse.gameLevelArray addObject:value];
  return self;
}
- (XCSDPBGameTestResponseBuilder *)setGameLevelArray:(NSArray *)array {
  resultGameTestResponse.gameLevelArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XCSDPBGameTestResponseBuilder *)clearGameLevel {
  resultGameTestResponse.gameLevelArray = nil;
  return self;
}
- (BOOL) hasUserId {
  return resultGameTestResponse.hasUserId;
}
- (SInt64) userId {
  return resultGameTestResponse.userId;
}
- (XCSDPBGameTestResponseBuilder*) setUserId:(SInt64) value {
  resultGameTestResponse.hasUserId = YES;
  resultGameTestResponse.userId = value;
  return self;
}
- (XCSDPBGameTestResponseBuilder*) clearUserId {
  resultGameTestResponse.hasUserId = NO;
  resultGameTestResponse.userId = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
