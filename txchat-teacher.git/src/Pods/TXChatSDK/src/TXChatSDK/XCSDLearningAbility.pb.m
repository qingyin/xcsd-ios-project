// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "XCSDLearningAbility.pb.h"
// @@protoc_insertion_point(imports)

@implementation XCSDPBXcsdlearningAbilityRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [XCSDPBXcsdlearningAbilityRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [XCSDPBXcsdhomeworkRoot registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL XCSDPBAbilityIsValidValue(XCSDPBAbility value) {
  switch (value) {
    case XCSDPBAbilityAttention:
    case XCSDPBAbilityMemory:
    case XCSDPBAbilityReaction:
    case XCSDPBAbilityReasoning:
    case XCSDPBAbilitySpatialThinking:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromXCSDPBAbility(XCSDPBAbility value) {
  switch (value) {
    case XCSDPBAbilityAttention:
      return @"XCSDPBAbilityAttention";
    case XCSDPBAbilityMemory:
      return @"XCSDPBAbilityMemory";
    case XCSDPBAbilityReaction:
      return @"XCSDPBAbilityReaction";
    case XCSDPBAbilityReasoning:
      return @"XCSDPBAbilityReasoning";
    case XCSDPBAbilitySpatialThinking:
      return @"XCSDPBAbilitySpatialThinking";
    default:
      return nil;
  }
}

@interface XCSDPBAbilityValue ()
@property XCSDPBAbility ability;
@property SInt32 value;
@end

@implementation XCSDPBAbilityValue

- (BOOL) hasAbility {
  return !!hasAbility_;
}
- (void) setHasAbility:(BOOL) _value_ {
  hasAbility_ = !!_value_;
}
@synthesize ability;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.ability = XCSDPBAbilityAttention;
    self.value = 0;
  }
  return self;
}
static XCSDPBAbilityValue* defaultXCSDPBAbilityValueInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBAbilityValue class]) {
    defaultXCSDPBAbilityValueInstance = [[XCSDPBAbilityValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBAbilityValueInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBAbilityValueInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAbility) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAbility) {
    [output writeEnum:1 value:self.ability];
  }
  if (self.hasValue) {
    [output writeInt32:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAbility) {
    size_ += computeEnumSize(1, self.ability);
  }
  if (self.hasValue) {
    size_ += computeInt32Size(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBAbilityValue*) parseFromData:(NSData*) data {
  return (XCSDPBAbilityValue*)[[[XCSDPBAbilityValue builder] mergeFromData:data] build];
}
+ (XCSDPBAbilityValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityValue*)[[[XCSDPBAbilityValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityValue*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBAbilityValue*)[[[XCSDPBAbilityValue builder] mergeFromInputStream:input] build];
}
+ (XCSDPBAbilityValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityValue*)[[[XCSDPBAbilityValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBAbilityValue*)[[[XCSDPBAbilityValue builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBAbilityValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityValue*)[[[XCSDPBAbilityValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityValueBuilder*) builder {
  return [[XCSDPBAbilityValueBuilder alloc] init];
}
+ (XCSDPBAbilityValueBuilder*) builderWithPrototype:(XCSDPBAbilityValue*) prototype {
  return [[XCSDPBAbilityValue builder] mergeFrom:prototype];
}
- (XCSDPBAbilityValueBuilder*) builder {
  return [XCSDPBAbilityValue builder];
}
- (XCSDPBAbilityValueBuilder*) toBuilder {
  return [XCSDPBAbilityValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAbility) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ability", NSStringFromXCSDPBAbility(self.ability)];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithInteger:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAbility) {
    [dictionary setObject: @(self.ability) forKey: @"ability"];
  }
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithInteger:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBAbilityValue class]]) {
    return NO;
  }
  XCSDPBAbilityValue *otherMessage = other;
  return
      self.hasAbility == otherMessage.hasAbility &&
      (!self.hasAbility || self.ability == otherMessage.ability) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAbility) {
    hashCode = hashCode * 31 + self.ability;
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBAbilityValueBuilder()
@property (strong) XCSDPBAbilityValue* resultAbilityValue;
@end

@implementation XCSDPBAbilityValueBuilder
@synthesize resultAbilityValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAbilityValue = [[XCSDPBAbilityValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAbilityValue;
}
- (XCSDPBAbilityValueBuilder*) clear {
  self.resultAbilityValue = [[XCSDPBAbilityValue alloc] init];
  return self;
}
- (XCSDPBAbilityValueBuilder*) clone {
  return [XCSDPBAbilityValue builderWithPrototype:resultAbilityValue];
}
- (XCSDPBAbilityValue*) defaultInstance {
  return [XCSDPBAbilityValue defaultInstance];
}
- (XCSDPBAbilityValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBAbilityValue*) buildPartial {
  XCSDPBAbilityValue* returnMe = resultAbilityValue;
  self.resultAbilityValue = nil;
  return returnMe;
}
- (XCSDPBAbilityValueBuilder*) mergeFrom:(XCSDPBAbilityValue*) other {
  if (other == [XCSDPBAbilityValue defaultInstance]) {
    return self;
  }
  if (other.hasAbility) {
    [self setAbility:other.ability];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBAbilityValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBAbilityValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        XCSDPBAbility value = (XCSDPBAbility)[input readEnum];
        if (XCSDPBAbilityIsValidValue(value)) {
          [self setAbility:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAbility {
  return resultAbilityValue.hasAbility;
}
- (XCSDPBAbility) ability {
  return resultAbilityValue.ability;
}
- (XCSDPBAbilityValueBuilder*) setAbility:(XCSDPBAbility) value {
  resultAbilityValue.hasAbility = YES;
  resultAbilityValue.ability = value;
  return self;
}
- (XCSDPBAbilityValueBuilder*) clearAbility {
  resultAbilityValue.hasAbility = NO;
  resultAbilityValue.ability = XCSDPBAbilityAttention;
  return self;
}
- (BOOL) hasValue {
  return resultAbilityValue.hasValue;
}
- (SInt32) value {
  return resultAbilityValue.value;
}
- (XCSDPBAbilityValueBuilder*) setValue:(SInt32) value {
  resultAbilityValue.hasValue = YES;
  resultAbilityValue.value = value;
  return self;
}
- (XCSDPBAbilityValueBuilder*) clearValue {
  resultAbilityValue.hasValue = NO;
  resultAbilityValue.value = 0;
  return self;
}
@end

@interface XCSDPBClassAbilityRankingRequest ()
@property SInt64 classId;
@end

@implementation XCSDPBClassAbilityRankingRequest

- (BOOL) hasClassId {
  return !!hasClassId_;
}
- (void) setHasClassId:(BOOL) _value_ {
  hasClassId_ = !!_value_;
}
@synthesize classId;
- (instancetype) init {
  if ((self = [super init])) {
    self.classId = 0L;
  }
  return self;
}
static XCSDPBClassAbilityRankingRequest* defaultXCSDPBClassAbilityRankingRequestInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBClassAbilityRankingRequest class]) {
    defaultXCSDPBClassAbilityRankingRequestInstance = [[XCSDPBClassAbilityRankingRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBClassAbilityRankingRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBClassAbilityRankingRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasClassId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClassId) {
    [output writeInt64:1 value:self.classId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasClassId) {
    size_ += computeInt64Size(1, self.classId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBClassAbilityRankingRequest*) parseFromData:(NSData*) data {
  return (XCSDPBClassAbilityRankingRequest*)[[[XCSDPBClassAbilityRankingRequest builder] mergeFromData:data] build];
}
+ (XCSDPBClassAbilityRankingRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBClassAbilityRankingRequest*)[[[XCSDPBClassAbilityRankingRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBClassAbilityRankingRequest*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBClassAbilityRankingRequest*)[[[XCSDPBClassAbilityRankingRequest builder] mergeFromInputStream:input] build];
}
+ (XCSDPBClassAbilityRankingRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBClassAbilityRankingRequest*)[[[XCSDPBClassAbilityRankingRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBClassAbilityRankingRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBClassAbilityRankingRequest*)[[[XCSDPBClassAbilityRankingRequest builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBClassAbilityRankingRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBClassAbilityRankingRequest*)[[[XCSDPBClassAbilityRankingRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBClassAbilityRankingRequestBuilder*) builder {
  return [[XCSDPBClassAbilityRankingRequestBuilder alloc] init];
}
+ (XCSDPBClassAbilityRankingRequestBuilder*) builderWithPrototype:(XCSDPBClassAbilityRankingRequest*) prototype {
  return [[XCSDPBClassAbilityRankingRequest builder] mergeFrom:prototype];
}
- (XCSDPBClassAbilityRankingRequestBuilder*) builder {
  return [XCSDPBClassAbilityRankingRequest builder];
}
- (XCSDPBClassAbilityRankingRequestBuilder*) toBuilder {
  return [XCSDPBClassAbilityRankingRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasClassId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classId", [NSNumber numberWithLongLong:self.classId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasClassId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.classId] forKey: @"classId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBClassAbilityRankingRequest class]]) {
    return NO;
  }
  XCSDPBClassAbilityRankingRequest *otherMessage = other;
  return
      self.hasClassId == otherMessage.hasClassId &&
      (!self.hasClassId || self.classId == otherMessage.classId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasClassId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.classId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBClassAbilityRankingRequestBuilder()
@property (strong) XCSDPBClassAbilityRankingRequest* resultClassAbilityRankingRequest;
@end

@implementation XCSDPBClassAbilityRankingRequestBuilder
@synthesize resultClassAbilityRankingRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClassAbilityRankingRequest = [[XCSDPBClassAbilityRankingRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClassAbilityRankingRequest;
}
- (XCSDPBClassAbilityRankingRequestBuilder*) clear {
  self.resultClassAbilityRankingRequest = [[XCSDPBClassAbilityRankingRequest alloc] init];
  return self;
}
- (XCSDPBClassAbilityRankingRequestBuilder*) clone {
  return [XCSDPBClassAbilityRankingRequest builderWithPrototype:resultClassAbilityRankingRequest];
}
- (XCSDPBClassAbilityRankingRequest*) defaultInstance {
  return [XCSDPBClassAbilityRankingRequest defaultInstance];
}
- (XCSDPBClassAbilityRankingRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBClassAbilityRankingRequest*) buildPartial {
  XCSDPBClassAbilityRankingRequest* returnMe = resultClassAbilityRankingRequest;
  self.resultClassAbilityRankingRequest = nil;
  return returnMe;
}
- (XCSDPBClassAbilityRankingRequestBuilder*) mergeFrom:(XCSDPBClassAbilityRankingRequest*) other {
  if (other == [XCSDPBClassAbilityRankingRequest defaultInstance]) {
    return self;
  }
  if (other.hasClassId) {
    [self setClassId:other.classId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBClassAbilityRankingRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBClassAbilityRankingRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setClassId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasClassId {
  return resultClassAbilityRankingRequest.hasClassId;
}
- (SInt64) classId {
  return resultClassAbilityRankingRequest.classId;
}
- (XCSDPBClassAbilityRankingRequestBuilder*) setClassId:(SInt64) value {
  resultClassAbilityRankingRequest.hasClassId = YES;
  resultClassAbilityRankingRequest.classId = value;
  return self;
}
- (XCSDPBClassAbilityRankingRequestBuilder*) clearClassId {
  resultClassAbilityRankingRequest.hasClassId = NO;
  resultClassAbilityRankingRequest.classId = 0L;
  return self;
}
@end

@interface XCSDPBClassAbilityRankingResponse ()
@property (strong) NSMutableArray * rankListArray;
@end

@implementation XCSDPBClassAbilityRankingResponse

@synthesize rankListArray;
@dynamic rankList;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static XCSDPBClassAbilityRankingResponse* defaultXCSDPBClassAbilityRankingResponseInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBClassAbilityRankingResponse class]) {
    defaultXCSDPBClassAbilityRankingResponseInstance = [[XCSDPBClassAbilityRankingResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBClassAbilityRankingResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBClassAbilityRankingResponseInstance;
}
- (NSArray *)rankList {
  return rankListArray;
}
- (XCSDPBUserRank*)rankListAtIndex:(NSUInteger)index {
  return [rankListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitrankList = YES;
   [self.rankList enumerateObjectsUsingBlock:^(XCSDPBUserRank *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitrankList = NO;
      *stop = YES;
    }
  }];
  if (!isInitrankList) return isInitrankList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.rankListArray enumerateObjectsUsingBlock:^(XCSDPBUserRank *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.rankListArray enumerateObjectsUsingBlock:^(XCSDPBUserRank *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBClassAbilityRankingResponse*) parseFromData:(NSData*) data {
  return (XCSDPBClassAbilityRankingResponse*)[[[XCSDPBClassAbilityRankingResponse builder] mergeFromData:data] build];
}
+ (XCSDPBClassAbilityRankingResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBClassAbilityRankingResponse*)[[[XCSDPBClassAbilityRankingResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBClassAbilityRankingResponse*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBClassAbilityRankingResponse*)[[[XCSDPBClassAbilityRankingResponse builder] mergeFromInputStream:input] build];
}
+ (XCSDPBClassAbilityRankingResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBClassAbilityRankingResponse*)[[[XCSDPBClassAbilityRankingResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBClassAbilityRankingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBClassAbilityRankingResponse*)[[[XCSDPBClassAbilityRankingResponse builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBClassAbilityRankingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBClassAbilityRankingResponse*)[[[XCSDPBClassAbilityRankingResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBClassAbilityRankingResponseBuilder*) builder {
  return [[XCSDPBClassAbilityRankingResponseBuilder alloc] init];
}
+ (XCSDPBClassAbilityRankingResponseBuilder*) builderWithPrototype:(XCSDPBClassAbilityRankingResponse*) prototype {
  return [[XCSDPBClassAbilityRankingResponse builder] mergeFrom:prototype];
}
- (XCSDPBClassAbilityRankingResponseBuilder*) builder {
  return [XCSDPBClassAbilityRankingResponse builder];
}
- (XCSDPBClassAbilityRankingResponseBuilder*) toBuilder {
  return [XCSDPBClassAbilityRankingResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.rankListArray enumerateObjectsUsingBlock:^(XCSDPBUserRank *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rankList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (XCSDPBUserRank* element in self.rankListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"rankList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBClassAbilityRankingResponse class]]) {
    return NO;
  }
  XCSDPBClassAbilityRankingResponse *otherMessage = other;
  return
      [self.rankListArray isEqualToArray:otherMessage.rankListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.rankListArray enumerateObjectsUsingBlock:^(XCSDPBUserRank *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBClassAbilityRankingResponseBuilder()
@property (strong) XCSDPBClassAbilityRankingResponse* resultClassAbilityRankingResponse;
@end

@implementation XCSDPBClassAbilityRankingResponseBuilder
@synthesize resultClassAbilityRankingResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClassAbilityRankingResponse = [[XCSDPBClassAbilityRankingResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClassAbilityRankingResponse;
}
- (XCSDPBClassAbilityRankingResponseBuilder*) clear {
  self.resultClassAbilityRankingResponse = [[XCSDPBClassAbilityRankingResponse alloc] init];
  return self;
}
- (XCSDPBClassAbilityRankingResponseBuilder*) clone {
  return [XCSDPBClassAbilityRankingResponse builderWithPrototype:resultClassAbilityRankingResponse];
}
- (XCSDPBClassAbilityRankingResponse*) defaultInstance {
  return [XCSDPBClassAbilityRankingResponse defaultInstance];
}
- (XCSDPBClassAbilityRankingResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBClassAbilityRankingResponse*) buildPartial {
  XCSDPBClassAbilityRankingResponse* returnMe = resultClassAbilityRankingResponse;
  self.resultClassAbilityRankingResponse = nil;
  return returnMe;
}
- (XCSDPBClassAbilityRankingResponseBuilder*) mergeFrom:(XCSDPBClassAbilityRankingResponse*) other {
  if (other == [XCSDPBClassAbilityRankingResponse defaultInstance]) {
    return self;
  }
  if (other.rankListArray.count > 0) {
    if (resultClassAbilityRankingResponse.rankListArray == nil) {
      resultClassAbilityRankingResponse.rankListArray = [[NSMutableArray alloc] initWithArray:other.rankListArray];
    } else {
      [resultClassAbilityRankingResponse.rankListArray addObjectsFromArray:other.rankListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBClassAbilityRankingResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBClassAbilityRankingResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        XCSDPBUserRankBuilder* subBuilder = [XCSDPBUserRank builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRankList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)rankList {
  return resultClassAbilityRankingResponse.rankListArray;
}
- (XCSDPBUserRank*)rankListAtIndex:(NSUInteger)index {
  return [resultClassAbilityRankingResponse rankListAtIndex:index];
}
- (XCSDPBClassAbilityRankingResponseBuilder *)addRankList:(XCSDPBUserRank*)value {
  if (resultClassAbilityRankingResponse.rankListArray == nil) {
    resultClassAbilityRankingResponse.rankListArray = [[NSMutableArray alloc]init];
  }
  [resultClassAbilityRankingResponse.rankListArray addObject:value];
  return self;
}
- (XCSDPBClassAbilityRankingResponseBuilder *)setRankListArray:(NSArray *)array {
  resultClassAbilityRankingResponse.rankListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XCSDPBClassAbilityRankingResponseBuilder *)clearRankList {
  resultClassAbilityRankingResponse.rankListArray = nil;
  return self;
}
@end

@interface XCSDPBAbilityStatRequest ()
@property SInt64 childUserId;
@end

@implementation XCSDPBAbilityStatRequest

- (BOOL) hasChildUserId {
  return !!hasChildUserId_;
}
- (void) setHasChildUserId:(BOOL) _value_ {
  hasChildUserId_ = !!_value_;
}
@synthesize childUserId;
- (instancetype) init {
  if ((self = [super init])) {
    self.childUserId = 0L;
  }
  return self;
}
static XCSDPBAbilityStatRequest* defaultXCSDPBAbilityStatRequestInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBAbilityStatRequest class]) {
    defaultXCSDPBAbilityStatRequestInstance = [[XCSDPBAbilityStatRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBAbilityStatRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBAbilityStatRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasChildUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChildUserId) {
    [output writeInt64:1 value:self.childUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChildUserId) {
    size_ += computeInt64Size(1, self.childUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBAbilityStatRequest*) parseFromData:(NSData*) data {
  return (XCSDPBAbilityStatRequest*)[[[XCSDPBAbilityStatRequest builder] mergeFromData:data] build];
}
+ (XCSDPBAbilityStatRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatRequest*)[[[XCSDPBAbilityStatRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatRequest*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBAbilityStatRequest*)[[[XCSDPBAbilityStatRequest builder] mergeFromInputStream:input] build];
}
+ (XCSDPBAbilityStatRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatRequest*)[[[XCSDPBAbilityStatRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBAbilityStatRequest*)[[[XCSDPBAbilityStatRequest builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBAbilityStatRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatRequest*)[[[XCSDPBAbilityStatRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatRequestBuilder*) builder {
  return [[XCSDPBAbilityStatRequestBuilder alloc] init];
}
+ (XCSDPBAbilityStatRequestBuilder*) builderWithPrototype:(XCSDPBAbilityStatRequest*) prototype {
  return [[XCSDPBAbilityStatRequest builder] mergeFrom:prototype];
}
- (XCSDPBAbilityStatRequestBuilder*) builder {
  return [XCSDPBAbilityStatRequest builder];
}
- (XCSDPBAbilityStatRequestBuilder*) toBuilder {
  return [XCSDPBAbilityStatRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChildUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"childUserId", [NSNumber numberWithLongLong:self.childUserId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChildUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.childUserId] forKey: @"childUserId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBAbilityStatRequest class]]) {
    return NO;
  }
  XCSDPBAbilityStatRequest *otherMessage = other;
  return
      self.hasChildUserId == otherMessage.hasChildUserId &&
      (!self.hasChildUserId || self.childUserId == otherMessage.childUserId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChildUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.childUserId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBAbilityStatRequestBuilder()
@property (strong) XCSDPBAbilityStatRequest* resultAbilityStatRequest;
@end

@implementation XCSDPBAbilityStatRequestBuilder
@synthesize resultAbilityStatRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAbilityStatRequest = [[XCSDPBAbilityStatRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAbilityStatRequest;
}
- (XCSDPBAbilityStatRequestBuilder*) clear {
  self.resultAbilityStatRequest = [[XCSDPBAbilityStatRequest alloc] init];
  return self;
}
- (XCSDPBAbilityStatRequestBuilder*) clone {
  return [XCSDPBAbilityStatRequest builderWithPrototype:resultAbilityStatRequest];
}
- (XCSDPBAbilityStatRequest*) defaultInstance {
  return [XCSDPBAbilityStatRequest defaultInstance];
}
- (XCSDPBAbilityStatRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBAbilityStatRequest*) buildPartial {
  XCSDPBAbilityStatRequest* returnMe = resultAbilityStatRequest;
  self.resultAbilityStatRequest = nil;
  return returnMe;
}
- (XCSDPBAbilityStatRequestBuilder*) mergeFrom:(XCSDPBAbilityStatRequest*) other {
  if (other == [XCSDPBAbilityStatRequest defaultInstance]) {
    return self;
  }
  if (other.hasChildUserId) {
    [self setChildUserId:other.childUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBAbilityStatRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBAbilityStatRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChildUserId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasChildUserId {
  return resultAbilityStatRequest.hasChildUserId;
}
- (SInt64) childUserId {
  return resultAbilityStatRequest.childUserId;
}
- (XCSDPBAbilityStatRequestBuilder*) setChildUserId:(SInt64) value {
  resultAbilityStatRequest.hasChildUserId = YES;
  resultAbilityStatRequest.childUserId = value;
  return self;
}
- (XCSDPBAbilityStatRequestBuilder*) clearChildUserId {
  resultAbilityStatRequest.hasChildUserId = NO;
  resultAbilityStatRequest.childUserId = 0L;
  return self;
}
@end

@interface XCSDPBAbilityDetail ()
@property XCSDPBAbility ability;
@property SInt32 level;
@property SInt32 avgLevel;
@property Float64 percentage;
@property SInt32 score;
@property SInt32 maxScore;
@property (strong) PBAppendableArray * gradeAvgLevelArray;
@end

@implementation XCSDPBAbilityDetail

- (BOOL) hasAbility {
  return !!hasAbility_;
}
- (void) setHasAbility:(BOOL) _value_ {
  hasAbility_ = !!_value_;
}
@synthesize ability;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasAvgLevel {
  return !!hasAvgLevel_;
}
- (void) setHasAvgLevel:(BOOL) _value_ {
  hasAvgLevel_ = !!_value_;
}
@synthesize avgLevel;
- (BOOL) hasPercentage {
  return !!hasPercentage_;
}
- (void) setHasPercentage:(BOOL) _value_ {
  hasPercentage_ = !!_value_;
}
@synthesize percentage;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) _value_ {
  hasScore_ = !!_value_;
}
@synthesize score;
- (BOOL) hasMaxScore {
  return !!hasMaxScore_;
}
- (void) setHasMaxScore:(BOOL) _value_ {
  hasMaxScore_ = !!_value_;
}
@synthesize maxScore;
@synthesize gradeAvgLevelArray;
@dynamic gradeAvgLevel;
- (instancetype) init {
  if ((self = [super init])) {
    self.ability = XCSDPBAbilityAttention;
    self.level = 0;
    self.avgLevel = 0;
    self.percentage = 0;
    self.score = 0;
    self.maxScore = 0;
  }
  return self;
}
static XCSDPBAbilityDetail* defaultXCSDPBAbilityDetailInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBAbilityDetail class]) {
    defaultXCSDPBAbilityDetailInstance = [[XCSDPBAbilityDetail alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBAbilityDetailInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBAbilityDetailInstance;
}
- (PBArray *)gradeAvgLevel {
  return gradeAvgLevelArray;
}
- (SInt32)gradeAvgLevelAtIndex:(NSUInteger)index {
  return [gradeAvgLevelArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasAbility) {
    return NO;
  }
  if (!self.hasLevel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAbility) {
    [output writeEnum:1 value:self.ability];
  }
  if (self.hasLevel) {
    [output writeInt32:2 value:self.level];
  }
  if (self.hasAvgLevel) {
    [output writeInt32:3 value:self.avgLevel];
  }
  if (self.hasPercentage) {
    [output writeDouble:4 value:self.percentage];
  }
  if (self.hasScore) {
    [output writeInt32:5 value:self.score];
  }
  if (self.hasMaxScore) {
    [output writeInt32:6 value:self.maxScore];
  }
  const NSUInteger gradeAvgLevelArrayCount = self.gradeAvgLevelArray.count;
  if (gradeAvgLevelArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.gradeAvgLevelArray.data;
    for (NSUInteger i = 0; i < gradeAvgLevelArrayCount; ++i) {
      [output writeInt32:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAbility) {
    size_ += computeEnumSize(1, self.ability);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(2, self.level);
  }
  if (self.hasAvgLevel) {
    size_ += computeInt32Size(3, self.avgLevel);
  }
  if (self.hasPercentage) {
    size_ += computeDoubleSize(4, self.percentage);
  }
  if (self.hasScore) {
    size_ += computeInt32Size(5, self.score);
  }
  if (self.hasMaxScore) {
    size_ += computeInt32Size(6, self.maxScore);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.gradeAvgLevelArray.count;
    const SInt32 *values = (const SInt32 *)self.gradeAvgLevelArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBAbilityDetail*) parseFromData:(NSData*) data {
  return (XCSDPBAbilityDetail*)[[[XCSDPBAbilityDetail builder] mergeFromData:data] build];
}
+ (XCSDPBAbilityDetail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityDetail*)[[[XCSDPBAbilityDetail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityDetail*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBAbilityDetail*)[[[XCSDPBAbilityDetail builder] mergeFromInputStream:input] build];
}
+ (XCSDPBAbilityDetail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityDetail*)[[[XCSDPBAbilityDetail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBAbilityDetail*)[[[XCSDPBAbilityDetail builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBAbilityDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityDetail*)[[[XCSDPBAbilityDetail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityDetailBuilder*) builder {
  return [[XCSDPBAbilityDetailBuilder alloc] init];
}
+ (XCSDPBAbilityDetailBuilder*) builderWithPrototype:(XCSDPBAbilityDetail*) prototype {
  return [[XCSDPBAbilityDetail builder] mergeFrom:prototype];
}
- (XCSDPBAbilityDetailBuilder*) builder {
  return [XCSDPBAbilityDetail builder];
}
- (XCSDPBAbilityDetailBuilder*) toBuilder {
  return [XCSDPBAbilityDetail builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAbility) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ability", NSStringFromXCSDPBAbility(self.ability)];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasAvgLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avgLevel", [NSNumber numberWithInteger:self.avgLevel]];
  }
  if (self.hasPercentage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"percentage", [NSNumber numberWithDouble:self.percentage]];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInteger:self.score]];
  }
  if (self.hasMaxScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxScore", [NSNumber numberWithInteger:self.maxScore]];
  }
  [self.gradeAvgLevelArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gradeAvgLevel", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAbility) {
    [dictionary setObject: @(self.ability) forKey: @"ability"];
  }
  if (self.hasLevel) {
    [dictionary setObject: [NSNumber numberWithInteger:self.level] forKey: @"level"];
  }
  if (self.hasAvgLevel) {
    [dictionary setObject: [NSNumber numberWithInteger:self.avgLevel] forKey: @"avgLevel"];
  }
  if (self.hasPercentage) {
    [dictionary setObject: [NSNumber numberWithDouble:self.percentage] forKey: @"percentage"];
  }
  if (self.hasScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.score] forKey: @"score"];
  }
  if (self.hasMaxScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxScore] forKey: @"maxScore"];
  }
  NSMutableArray * gradeAvgLevelArrayArray = [NSMutableArray new];
  NSUInteger gradeAvgLevelArrayCount=self.gradeAvgLevelArray.count;
  for(int i=0;i<gradeAvgLevelArrayCount;i++){
    [gradeAvgLevelArrayArray addObject: @([self.gradeAvgLevelArray int32AtIndex:i])];
  }
  [dictionary setObject: gradeAvgLevelArrayArray forKey: @"gradeAvgLevel"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBAbilityDetail class]]) {
    return NO;
  }
  XCSDPBAbilityDetail *otherMessage = other;
  return
      self.hasAbility == otherMessage.hasAbility &&
      (!self.hasAbility || self.ability == otherMessage.ability) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasAvgLevel == otherMessage.hasAvgLevel &&
      (!self.hasAvgLevel || self.avgLevel == otherMessage.avgLevel) &&
      self.hasPercentage == otherMessage.hasPercentage &&
      (!self.hasPercentage || self.percentage == otherMessage.percentage) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      self.hasMaxScore == otherMessage.hasMaxScore &&
      (!self.hasMaxScore || self.maxScore == otherMessage.maxScore) &&
      [self.gradeAvgLevelArray isEqualToArray:otherMessage.gradeAvgLevelArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAbility) {
    hashCode = hashCode * 31 + self.ability;
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasAvgLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.avgLevel] hash];
  }
  if (self.hasPercentage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.percentage] hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.score] hash];
  }
  if (self.hasMaxScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxScore] hash];
  }
  [self.gradeAvgLevelArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBAbilityDetailBuilder()
@property (strong) XCSDPBAbilityDetail* resultAbilityDetail;
@end

@implementation XCSDPBAbilityDetailBuilder
@synthesize resultAbilityDetail;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAbilityDetail = [[XCSDPBAbilityDetail alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAbilityDetail;
}
- (XCSDPBAbilityDetailBuilder*) clear {
  self.resultAbilityDetail = [[XCSDPBAbilityDetail alloc] init];
  return self;
}
- (XCSDPBAbilityDetailBuilder*) clone {
  return [XCSDPBAbilityDetail builderWithPrototype:resultAbilityDetail];
}
- (XCSDPBAbilityDetail*) defaultInstance {
  return [XCSDPBAbilityDetail defaultInstance];
}
- (XCSDPBAbilityDetail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBAbilityDetail*) buildPartial {
  XCSDPBAbilityDetail* returnMe = resultAbilityDetail;
  self.resultAbilityDetail = nil;
  return returnMe;
}
- (XCSDPBAbilityDetailBuilder*) mergeFrom:(XCSDPBAbilityDetail*) other {
  if (other == [XCSDPBAbilityDetail defaultInstance]) {
    return self;
  }
  if (other.hasAbility) {
    [self setAbility:other.ability];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasAvgLevel) {
    [self setAvgLevel:other.avgLevel];
  }
  if (other.hasPercentage) {
    [self setPercentage:other.percentage];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasMaxScore) {
    [self setMaxScore:other.maxScore];
  }
  if (other.gradeAvgLevelArray.count > 0) {
    if (resultAbilityDetail.gradeAvgLevelArray == nil) {
      resultAbilityDetail.gradeAvgLevelArray = [other.gradeAvgLevelArray copy];
    } else {
      [resultAbilityDetail.gradeAvgLevelArray appendArray:other.gradeAvgLevelArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBAbilityDetailBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBAbilityDetailBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        XCSDPBAbility value = (XCSDPBAbility)[input readEnum];
        if (XCSDPBAbilityIsValidValue(value)) {
          [self setAbility:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 24: {
        [self setAvgLevel:[input readInt32]];
        break;
      }
      case 33: {
        [self setPercentage:[input readDouble]];
        break;
      }
      case 40: {
        [self setScore:[input readInt32]];
        break;
      }
      case 48: {
        [self setMaxScore:[input readInt32]];
        break;
      }
      case 56: {
        [self addGradeAvgLevel:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAbility {
  return resultAbilityDetail.hasAbility;
}
- (XCSDPBAbility) ability {
  return resultAbilityDetail.ability;
}
- (XCSDPBAbilityDetailBuilder*) setAbility:(XCSDPBAbility) value {
  resultAbilityDetail.hasAbility = YES;
  resultAbilityDetail.ability = value;
  return self;
}
- (XCSDPBAbilityDetailBuilder*) clearAbility {
  resultAbilityDetail.hasAbility = NO;
  resultAbilityDetail.ability = XCSDPBAbilityAttention;
  return self;
}
- (BOOL) hasLevel {
  return resultAbilityDetail.hasLevel;
}
- (SInt32) level {
  return resultAbilityDetail.level;
}
- (XCSDPBAbilityDetailBuilder*) setLevel:(SInt32) value {
  resultAbilityDetail.hasLevel = YES;
  resultAbilityDetail.level = value;
  return self;
}
- (XCSDPBAbilityDetailBuilder*) clearLevel {
  resultAbilityDetail.hasLevel = NO;
  resultAbilityDetail.level = 0;
  return self;
}
- (BOOL) hasAvgLevel {
  return resultAbilityDetail.hasAvgLevel;
}
- (SInt32) avgLevel {
  return resultAbilityDetail.avgLevel;
}
- (XCSDPBAbilityDetailBuilder*) setAvgLevel:(SInt32) value {
  resultAbilityDetail.hasAvgLevel = YES;
  resultAbilityDetail.avgLevel = value;
  return self;
}
- (XCSDPBAbilityDetailBuilder*) clearAvgLevel {
  resultAbilityDetail.hasAvgLevel = NO;
  resultAbilityDetail.avgLevel = 0;
  return self;
}
- (BOOL) hasPercentage {
  return resultAbilityDetail.hasPercentage;
}
- (Float64) percentage {
  return resultAbilityDetail.percentage;
}
- (XCSDPBAbilityDetailBuilder*) setPercentage:(Float64) value {
  resultAbilityDetail.hasPercentage = YES;
  resultAbilityDetail.percentage = value;
  return self;
}
- (XCSDPBAbilityDetailBuilder*) clearPercentage {
  resultAbilityDetail.hasPercentage = NO;
  resultAbilityDetail.percentage = 0;
  return self;
}
- (BOOL) hasScore {
  return resultAbilityDetail.hasScore;
}
- (SInt32) score {
  return resultAbilityDetail.score;
}
- (XCSDPBAbilityDetailBuilder*) setScore:(SInt32) value {
  resultAbilityDetail.hasScore = YES;
  resultAbilityDetail.score = value;
  return self;
}
- (XCSDPBAbilityDetailBuilder*) clearScore {
  resultAbilityDetail.hasScore = NO;
  resultAbilityDetail.score = 0;
  return self;
}
- (BOOL) hasMaxScore {
  return resultAbilityDetail.hasMaxScore;
}
- (SInt32) maxScore {
  return resultAbilityDetail.maxScore;
}
- (XCSDPBAbilityDetailBuilder*) setMaxScore:(SInt32) value {
  resultAbilityDetail.hasMaxScore = YES;
  resultAbilityDetail.maxScore = value;
  return self;
}
- (XCSDPBAbilityDetailBuilder*) clearMaxScore {
  resultAbilityDetail.hasMaxScore = NO;
  resultAbilityDetail.maxScore = 0;
  return self;
}
- (PBAppendableArray *)gradeAvgLevel {
  return resultAbilityDetail.gradeAvgLevelArray;
}
- (SInt32)gradeAvgLevelAtIndex:(NSUInteger)index {
  return [resultAbilityDetail gradeAvgLevelAtIndex:index];
}
- (XCSDPBAbilityDetailBuilder *)addGradeAvgLevel:(SInt32)value {
  if (resultAbilityDetail.gradeAvgLevelArray == nil) {
    resultAbilityDetail.gradeAvgLevelArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultAbilityDetail.gradeAvgLevelArray addInt32:value];
  return self;
}
- (XCSDPBAbilityDetailBuilder *)setGradeAvgLevelArray:(NSArray *)array {
  resultAbilityDetail.gradeAvgLevelArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (XCSDPBAbilityDetailBuilder *)setGradeAvgLevelValues:(const SInt32 *)values count:(NSUInteger)count {
  resultAbilityDetail.gradeAvgLevelArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (XCSDPBAbilityDetailBuilder *)clearGradeAvgLevel {
  resultAbilityDetail.gradeAvgLevelArray = nil;
  return self;
}
@end

@interface XCSDPBAbilityStatResponse ()
@property (strong) NSMutableArray * detailsArray;
@property SInt32 totalAbilityLevel;
@property Float64 totalAbilityPercentage;
@property SInt32 abilityQuotient;
@property SInt32 maxAbilityQuotient;
@property (strong) NSMutableArray * abilityChartArray;
@end

@implementation XCSDPBAbilityStatResponse

@synthesize detailsArray;
@dynamic details;
- (BOOL) hasTotalAbilityLevel {
  return !!hasTotalAbilityLevel_;
}
- (void) setHasTotalAbilityLevel:(BOOL) _value_ {
  hasTotalAbilityLevel_ = !!_value_;
}
@synthesize totalAbilityLevel;
- (BOOL) hasTotalAbilityPercentage {
  return !!hasTotalAbilityPercentage_;
}
- (void) setHasTotalAbilityPercentage:(BOOL) _value_ {
  hasTotalAbilityPercentage_ = !!_value_;
}
@synthesize totalAbilityPercentage;
- (BOOL) hasAbilityQuotient {
  return !!hasAbilityQuotient_;
}
- (void) setHasAbilityQuotient:(BOOL) _value_ {
  hasAbilityQuotient_ = !!_value_;
}
@synthesize abilityQuotient;
- (BOOL) hasMaxAbilityQuotient {
  return !!hasMaxAbilityQuotient_;
}
- (void) setHasMaxAbilityQuotient:(BOOL) _value_ {
  hasMaxAbilityQuotient_ = !!_value_;
}
@synthesize maxAbilityQuotient;
@synthesize abilityChartArray;
@dynamic abilityChart;
- (instancetype) init {
  if ((self = [super init])) {
    self.totalAbilityLevel = 0;
    self.totalAbilityPercentage = 0;
    self.abilityQuotient = 0;
    self.maxAbilityQuotient = 0;
  }
  return self;
}
static XCSDPBAbilityStatResponse* defaultXCSDPBAbilityStatResponseInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBAbilityStatResponse class]) {
    defaultXCSDPBAbilityStatResponseInstance = [[XCSDPBAbilityStatResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBAbilityStatResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBAbilityStatResponseInstance;
}
- (NSArray *)details {
  return detailsArray;
}
- (XCSDPBAbilityDetail*)detailsAtIndex:(NSUInteger)index {
  return [detailsArray objectAtIndex:index];
}
- (NSArray *)abilityChart {
  return abilityChartArray;
}
- (XCSDPBAbilityStatResponsePoint*)abilityChartAtIndex:(NSUInteger)index {
  return [abilityChartArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTotalAbilityLevel) {
    return NO;
  }
  if (!self.hasTotalAbilityPercentage) {
    return NO;
  }
  if (!self.hasAbilityQuotient) {
    return NO;
  }
  if (!self.hasMaxAbilityQuotient) {
    return NO;
  }
  __block BOOL isInitdetails = YES;
   [self.details enumerateObjectsUsingBlock:^(XCSDPBAbilityDetail *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdetails = NO;
      *stop = YES;
    }
  }];
  if (!isInitdetails) return isInitdetails;
  __block BOOL isInitabilityChart = YES;
   [self.abilityChart enumerateObjectsUsingBlock:^(XCSDPBAbilityStatResponsePoint *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitabilityChart = NO;
      *stop = YES;
    }
  }];
  if (!isInitabilityChart) return isInitabilityChart;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.detailsArray enumerateObjectsUsingBlock:^(XCSDPBAbilityDetail *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasTotalAbilityLevel) {
    [output writeInt32:2 value:self.totalAbilityLevel];
  }
  if (self.hasTotalAbilityPercentage) {
    [output writeDouble:3 value:self.totalAbilityPercentage];
  }
  if (self.hasAbilityQuotient) {
    [output writeInt32:4 value:self.abilityQuotient];
  }
  if (self.hasMaxAbilityQuotient) {
    [output writeInt32:5 value:self.maxAbilityQuotient];
  }
  [self.abilityChartArray enumerateObjectsUsingBlock:^(XCSDPBAbilityStatResponsePoint *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.detailsArray enumerateObjectsUsingBlock:^(XCSDPBAbilityDetail *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasTotalAbilityLevel) {
    size_ += computeInt32Size(2, self.totalAbilityLevel);
  }
  if (self.hasTotalAbilityPercentage) {
    size_ += computeDoubleSize(3, self.totalAbilityPercentage);
  }
  if (self.hasAbilityQuotient) {
    size_ += computeInt32Size(4, self.abilityQuotient);
  }
  if (self.hasMaxAbilityQuotient) {
    size_ += computeInt32Size(5, self.maxAbilityQuotient);
  }
  [self.abilityChartArray enumerateObjectsUsingBlock:^(XCSDPBAbilityStatResponsePoint *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBAbilityStatResponse*) parseFromData:(NSData*) data {
  return (XCSDPBAbilityStatResponse*)[[[XCSDPBAbilityStatResponse builder] mergeFromData:data] build];
}
+ (XCSDPBAbilityStatResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatResponse*)[[[XCSDPBAbilityStatResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatResponse*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBAbilityStatResponse*)[[[XCSDPBAbilityStatResponse builder] mergeFromInputStream:input] build];
}
+ (XCSDPBAbilityStatResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatResponse*)[[[XCSDPBAbilityStatResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBAbilityStatResponse*)[[[XCSDPBAbilityStatResponse builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBAbilityStatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatResponse*)[[[XCSDPBAbilityStatResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatResponseBuilder*) builder {
  return [[XCSDPBAbilityStatResponseBuilder alloc] init];
}
+ (XCSDPBAbilityStatResponseBuilder*) builderWithPrototype:(XCSDPBAbilityStatResponse*) prototype {
  return [[XCSDPBAbilityStatResponse builder] mergeFrom:prototype];
}
- (XCSDPBAbilityStatResponseBuilder*) builder {
  return [XCSDPBAbilityStatResponse builder];
}
- (XCSDPBAbilityStatResponseBuilder*) toBuilder {
  return [XCSDPBAbilityStatResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.detailsArray enumerateObjectsUsingBlock:^(XCSDPBAbilityDetail *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"details"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTotalAbilityLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalAbilityLevel", [NSNumber numberWithInteger:self.totalAbilityLevel]];
  }
  if (self.hasTotalAbilityPercentage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalAbilityPercentage", [NSNumber numberWithDouble:self.totalAbilityPercentage]];
  }
  if (self.hasAbilityQuotient) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abilityQuotient", [NSNumber numberWithInteger:self.abilityQuotient]];
  }
  if (self.hasMaxAbilityQuotient) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxAbilityQuotient", [NSNumber numberWithInteger:self.maxAbilityQuotient]];
  }
  [self.abilityChartArray enumerateObjectsUsingBlock:^(XCSDPBAbilityStatResponsePoint *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"abilityChart"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (XCSDPBAbilityDetail* element in self.detailsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"details"];
  }
  if (self.hasTotalAbilityLevel) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalAbilityLevel] forKey: @"totalAbilityLevel"];
  }
  if (self.hasTotalAbilityPercentage) {
    [dictionary setObject: [NSNumber numberWithDouble:self.totalAbilityPercentage] forKey: @"totalAbilityPercentage"];
  }
  if (self.hasAbilityQuotient) {
    [dictionary setObject: [NSNumber numberWithInteger:self.abilityQuotient] forKey: @"abilityQuotient"];
  }
  if (self.hasMaxAbilityQuotient) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxAbilityQuotient] forKey: @"maxAbilityQuotient"];
  }
  for (XCSDPBAbilityStatResponsePoint* element in self.abilityChartArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"abilityChart"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBAbilityStatResponse class]]) {
    return NO;
  }
  XCSDPBAbilityStatResponse *otherMessage = other;
  return
      [self.detailsArray isEqualToArray:otherMessage.detailsArray] &&
      self.hasTotalAbilityLevel == otherMessage.hasTotalAbilityLevel &&
      (!self.hasTotalAbilityLevel || self.totalAbilityLevel == otherMessage.totalAbilityLevel) &&
      self.hasTotalAbilityPercentage == otherMessage.hasTotalAbilityPercentage &&
      (!self.hasTotalAbilityPercentage || self.totalAbilityPercentage == otherMessage.totalAbilityPercentage) &&
      self.hasAbilityQuotient == otherMessage.hasAbilityQuotient &&
      (!self.hasAbilityQuotient || self.abilityQuotient == otherMessage.abilityQuotient) &&
      self.hasMaxAbilityQuotient == otherMessage.hasMaxAbilityQuotient &&
      (!self.hasMaxAbilityQuotient || self.maxAbilityQuotient == otherMessage.maxAbilityQuotient) &&
      [self.abilityChartArray isEqualToArray:otherMessage.abilityChartArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.detailsArray enumerateObjectsUsingBlock:^(XCSDPBAbilityDetail *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTotalAbilityLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalAbilityLevel] hash];
  }
  if (self.hasTotalAbilityPercentage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.totalAbilityPercentage] hash];
  }
  if (self.hasAbilityQuotient) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.abilityQuotient] hash];
  }
  if (self.hasMaxAbilityQuotient) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxAbilityQuotient] hash];
  }
  [self.abilityChartArray enumerateObjectsUsingBlock:^(XCSDPBAbilityStatResponsePoint *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBAbilityStatResponsePoint ()
@property SInt32 number;
@property SInt32 score;
@end

@implementation XCSDPBAbilityStatResponsePoint

- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) _value_ {
  hasScore_ = !!_value_;
}
@synthesize score;
- (instancetype) init {
  if ((self = [super init])) {
    self.number = 0;
    self.score = 0;
  }
  return self;
}
static XCSDPBAbilityStatResponsePoint* defaultXCSDPBAbilityStatResponsePointInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBAbilityStatResponsePoint class]) {
    defaultXCSDPBAbilityStatResponsePointInstance = [[XCSDPBAbilityStatResponsePoint alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBAbilityStatResponsePointInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBAbilityStatResponsePointInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNumber) {
    return NO;
  }
  if (!self.hasScore) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNumber) {
    [output writeInt32:1 value:self.number];
  }
  if (self.hasScore) {
    [output writeInt32:2 value:self.score];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNumber) {
    size_ += computeInt32Size(1, self.number);
  }
  if (self.hasScore) {
    size_ += computeInt32Size(2, self.score);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBAbilityStatResponsePoint*) parseFromData:(NSData*) data {
  return (XCSDPBAbilityStatResponsePoint*)[[[XCSDPBAbilityStatResponsePoint builder] mergeFromData:data] build];
}
+ (XCSDPBAbilityStatResponsePoint*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatResponsePoint*)[[[XCSDPBAbilityStatResponsePoint builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatResponsePoint*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBAbilityStatResponsePoint*)[[[XCSDPBAbilityStatResponsePoint builder] mergeFromInputStream:input] build];
}
+ (XCSDPBAbilityStatResponsePoint*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatResponsePoint*)[[[XCSDPBAbilityStatResponsePoint builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatResponsePoint*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBAbilityStatResponsePoint*)[[[XCSDPBAbilityStatResponsePoint builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBAbilityStatResponsePoint*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityStatResponsePoint*)[[[XCSDPBAbilityStatResponsePoint builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityStatResponsePointBuilder*) builder {
  return [[XCSDPBAbilityStatResponsePointBuilder alloc] init];
}
+ (XCSDPBAbilityStatResponsePointBuilder*) builderWithPrototype:(XCSDPBAbilityStatResponsePoint*) prototype {
  return [[XCSDPBAbilityStatResponsePoint builder] mergeFrom:prototype];
}
- (XCSDPBAbilityStatResponsePointBuilder*) builder {
  return [XCSDPBAbilityStatResponsePoint builder];
}
- (XCSDPBAbilityStatResponsePointBuilder*) toBuilder {
  return [XCSDPBAbilityStatResponsePoint builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", [NSNumber numberWithInteger:self.number]];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInteger:self.score]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNumber) {
    [dictionary setObject: [NSNumber numberWithInteger:self.number] forKey: @"number"];
  }
  if (self.hasScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.score] forKey: @"score"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBAbilityStatResponsePoint class]]) {
    return NO;
  }
  XCSDPBAbilityStatResponsePoint *otherMessage = other;
  return
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || self.number == otherMessage.number) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.number] hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.score] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBAbilityStatResponsePointBuilder()
@property (strong) XCSDPBAbilityStatResponsePoint* resultPoint;
@end

@implementation XCSDPBAbilityStatResponsePointBuilder
@synthesize resultPoint;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPoint = [[XCSDPBAbilityStatResponsePoint alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPoint;
}
- (XCSDPBAbilityStatResponsePointBuilder*) clear {
  self.resultPoint = [[XCSDPBAbilityStatResponsePoint alloc] init];
  return self;
}
- (XCSDPBAbilityStatResponsePointBuilder*) clone {
  return [XCSDPBAbilityStatResponsePoint builderWithPrototype:resultPoint];
}
- (XCSDPBAbilityStatResponsePoint*) defaultInstance {
  return [XCSDPBAbilityStatResponsePoint defaultInstance];
}
- (XCSDPBAbilityStatResponsePoint*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBAbilityStatResponsePoint*) buildPartial {
  XCSDPBAbilityStatResponsePoint* returnMe = resultPoint;
  self.resultPoint = nil;
  return returnMe;
}
- (XCSDPBAbilityStatResponsePointBuilder*) mergeFrom:(XCSDPBAbilityStatResponsePoint*) other {
  if (other == [XCSDPBAbilityStatResponsePoint defaultInstance]) {
    return self;
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBAbilityStatResponsePointBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBAbilityStatResponsePointBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNumber:[input readInt32]];
        break;
      }
      case 16: {
        [self setScore:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasNumber {
  return resultPoint.hasNumber;
}
- (SInt32) number {
  return resultPoint.number;
}
- (XCSDPBAbilityStatResponsePointBuilder*) setNumber:(SInt32) value {
  resultPoint.hasNumber = YES;
  resultPoint.number = value;
  return self;
}
- (XCSDPBAbilityStatResponsePointBuilder*) clearNumber {
  resultPoint.hasNumber = NO;
  resultPoint.number = 0;
  return self;
}
- (BOOL) hasScore {
  return resultPoint.hasScore;
}
- (SInt32) score {
  return resultPoint.score;
}
- (XCSDPBAbilityStatResponsePointBuilder*) setScore:(SInt32) value {
  resultPoint.hasScore = YES;
  resultPoint.score = value;
  return self;
}
- (XCSDPBAbilityStatResponsePointBuilder*) clearScore {
  resultPoint.hasScore = NO;
  resultPoint.score = 0;
  return self;
}
@end

@interface XCSDPBAbilityStatResponseBuilder()
@property (strong) XCSDPBAbilityStatResponse* resultAbilityStatResponse;
@end

@implementation XCSDPBAbilityStatResponseBuilder
@synthesize resultAbilityStatResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAbilityStatResponse = [[XCSDPBAbilityStatResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAbilityStatResponse;
}
- (XCSDPBAbilityStatResponseBuilder*) clear {
  self.resultAbilityStatResponse = [[XCSDPBAbilityStatResponse alloc] init];
  return self;
}
- (XCSDPBAbilityStatResponseBuilder*) clone {
  return [XCSDPBAbilityStatResponse builderWithPrototype:resultAbilityStatResponse];
}
- (XCSDPBAbilityStatResponse*) defaultInstance {
  return [XCSDPBAbilityStatResponse defaultInstance];
}
- (XCSDPBAbilityStatResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBAbilityStatResponse*) buildPartial {
  XCSDPBAbilityStatResponse* returnMe = resultAbilityStatResponse;
  self.resultAbilityStatResponse = nil;
  return returnMe;
}
- (XCSDPBAbilityStatResponseBuilder*) mergeFrom:(XCSDPBAbilityStatResponse*) other {
  if (other == [XCSDPBAbilityStatResponse defaultInstance]) {
    return self;
  }
  if (other.detailsArray.count > 0) {
    if (resultAbilityStatResponse.detailsArray == nil) {
      resultAbilityStatResponse.detailsArray = [[NSMutableArray alloc] initWithArray:other.detailsArray];
    } else {
      [resultAbilityStatResponse.detailsArray addObjectsFromArray:other.detailsArray];
    }
  }
  if (other.hasTotalAbilityLevel) {
    [self setTotalAbilityLevel:other.totalAbilityLevel];
  }
  if (other.hasTotalAbilityPercentage) {
    [self setTotalAbilityPercentage:other.totalAbilityPercentage];
  }
  if (other.hasAbilityQuotient) {
    [self setAbilityQuotient:other.abilityQuotient];
  }
  if (other.hasMaxAbilityQuotient) {
    [self setMaxAbilityQuotient:other.maxAbilityQuotient];
  }
  if (other.abilityChartArray.count > 0) {
    if (resultAbilityStatResponse.abilityChartArray == nil) {
      resultAbilityStatResponse.abilityChartArray = [[NSMutableArray alloc] initWithArray:other.abilityChartArray];
    } else {
      [resultAbilityStatResponse.abilityChartArray addObjectsFromArray:other.abilityChartArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBAbilityStatResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBAbilityStatResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        XCSDPBAbilityDetailBuilder* subBuilder = [XCSDPBAbilityDetail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDetails:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setTotalAbilityLevel:[input readInt32]];
        break;
      }
      case 25: {
        [self setTotalAbilityPercentage:[input readDouble]];
        break;
      }
      case 32: {
        [self setAbilityQuotient:[input readInt32]];
        break;
      }
      case 40: {
        [self setMaxAbilityQuotient:[input readInt32]];
        break;
      }
      case 50: {
        XCSDPBAbilityStatResponsePointBuilder* subBuilder = [XCSDPBAbilityStatResponsePoint builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAbilityChart:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)details {
  return resultAbilityStatResponse.detailsArray;
}
- (XCSDPBAbilityDetail*)detailsAtIndex:(NSUInteger)index {
  return [resultAbilityStatResponse detailsAtIndex:index];
}
- (XCSDPBAbilityStatResponseBuilder *)addDetails:(XCSDPBAbilityDetail*)value {
  if (resultAbilityStatResponse.detailsArray == nil) {
    resultAbilityStatResponse.detailsArray = [[NSMutableArray alloc]init];
  }
  [resultAbilityStatResponse.detailsArray addObject:value];
  return self;
}
- (XCSDPBAbilityStatResponseBuilder *)setDetailsArray:(NSArray *)array {
  resultAbilityStatResponse.detailsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XCSDPBAbilityStatResponseBuilder *)clearDetails {
  resultAbilityStatResponse.detailsArray = nil;
  return self;
}
- (BOOL) hasTotalAbilityLevel {
  return resultAbilityStatResponse.hasTotalAbilityLevel;
}
- (SInt32) totalAbilityLevel {
  return resultAbilityStatResponse.totalAbilityLevel;
}
- (XCSDPBAbilityStatResponseBuilder*) setTotalAbilityLevel:(SInt32) value {
  resultAbilityStatResponse.hasTotalAbilityLevel = YES;
  resultAbilityStatResponse.totalAbilityLevel = value;
  return self;
}
- (XCSDPBAbilityStatResponseBuilder*) clearTotalAbilityLevel {
  resultAbilityStatResponse.hasTotalAbilityLevel = NO;
  resultAbilityStatResponse.totalAbilityLevel = 0;
  return self;
}
- (BOOL) hasTotalAbilityPercentage {
  return resultAbilityStatResponse.hasTotalAbilityPercentage;
}
- (Float64) totalAbilityPercentage {
  return resultAbilityStatResponse.totalAbilityPercentage;
}
- (XCSDPBAbilityStatResponseBuilder*) setTotalAbilityPercentage:(Float64) value {
  resultAbilityStatResponse.hasTotalAbilityPercentage = YES;
  resultAbilityStatResponse.totalAbilityPercentage = value;
  return self;
}
- (XCSDPBAbilityStatResponseBuilder*) clearTotalAbilityPercentage {
  resultAbilityStatResponse.hasTotalAbilityPercentage = NO;
  resultAbilityStatResponse.totalAbilityPercentage = 0;
  return self;
}
- (BOOL) hasAbilityQuotient {
  return resultAbilityStatResponse.hasAbilityQuotient;
}
- (SInt32) abilityQuotient {
  return resultAbilityStatResponse.abilityQuotient;
}
- (XCSDPBAbilityStatResponseBuilder*) setAbilityQuotient:(SInt32) value {
  resultAbilityStatResponse.hasAbilityQuotient = YES;
  resultAbilityStatResponse.abilityQuotient = value;
  return self;
}
- (XCSDPBAbilityStatResponseBuilder*) clearAbilityQuotient {
  resultAbilityStatResponse.hasAbilityQuotient = NO;
  resultAbilityStatResponse.abilityQuotient = 0;
  return self;
}
- (BOOL) hasMaxAbilityQuotient {
  return resultAbilityStatResponse.hasMaxAbilityQuotient;
}
- (SInt32) maxAbilityQuotient {
  return resultAbilityStatResponse.maxAbilityQuotient;
}
- (XCSDPBAbilityStatResponseBuilder*) setMaxAbilityQuotient:(SInt32) value {
  resultAbilityStatResponse.hasMaxAbilityQuotient = YES;
  resultAbilityStatResponse.maxAbilityQuotient = value;
  return self;
}
- (XCSDPBAbilityStatResponseBuilder*) clearMaxAbilityQuotient {
  resultAbilityStatResponse.hasMaxAbilityQuotient = NO;
  resultAbilityStatResponse.maxAbilityQuotient = 0;
  return self;
}
- (NSMutableArray *)abilityChart {
  return resultAbilityStatResponse.abilityChartArray;
}
- (XCSDPBAbilityStatResponsePoint*)abilityChartAtIndex:(NSUInteger)index {
  return [resultAbilityStatResponse abilityChartAtIndex:index];
}
- (XCSDPBAbilityStatResponseBuilder *)addAbilityChart:(XCSDPBAbilityStatResponsePoint*)value {
  if (resultAbilityStatResponse.abilityChartArray == nil) {
    resultAbilityStatResponse.abilityChartArray = [[NSMutableArray alloc]init];
  }
  [resultAbilityStatResponse.abilityChartArray addObject:value];
  return self;
}
- (XCSDPBAbilityStatResponseBuilder *)setAbilityChartArray:(NSArray *)array {
  resultAbilityStatResponse.abilityChartArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XCSDPBAbilityStatResponseBuilder *)clearAbilityChart {
  resultAbilityStatResponse.abilityChartArray = nil;
  return self;
}
@end

@interface XCSDPBAbilityScoreRequest ()
@property SInt64 userId;
@property XCSDPBAbility ability;
@end

@implementation XCSDPBAbilityScoreRequest

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAbility {
  return !!hasAbility_;
}
- (void) setHasAbility:(BOOL) _value_ {
  hasAbility_ = !!_value_;
}
@synthesize ability;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.ability = XCSDPBAbilityAttention;
  }
  return self;
}
static XCSDPBAbilityScoreRequest* defaultXCSDPBAbilityScoreRequestInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBAbilityScoreRequest class]) {
    defaultXCSDPBAbilityScoreRequestInstance = [[XCSDPBAbilityScoreRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBAbilityScoreRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBAbilityScoreRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasAbility) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt64:1 value:self.userId];
  }
  if (self.hasAbility) {
    [output writeEnum:2 value:self.ability];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeInt64Size(1, self.userId);
  }
  if (self.hasAbility) {
    size_ += computeEnumSize(2, self.ability);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBAbilityScoreRequest*) parseFromData:(NSData*) data {
  return (XCSDPBAbilityScoreRequest*)[[[XCSDPBAbilityScoreRequest builder] mergeFromData:data] build];
}
+ (XCSDPBAbilityScoreRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreRequest*)[[[XCSDPBAbilityScoreRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreRequest*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBAbilityScoreRequest*)[[[XCSDPBAbilityScoreRequest builder] mergeFromInputStream:input] build];
}
+ (XCSDPBAbilityScoreRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreRequest*)[[[XCSDPBAbilityScoreRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBAbilityScoreRequest*)[[[XCSDPBAbilityScoreRequest builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBAbilityScoreRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreRequest*)[[[XCSDPBAbilityScoreRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreRequestBuilder*) builder {
  return [[XCSDPBAbilityScoreRequestBuilder alloc] init];
}
+ (XCSDPBAbilityScoreRequestBuilder*) builderWithPrototype:(XCSDPBAbilityScoreRequest*) prototype {
  return [[XCSDPBAbilityScoreRequest builder] mergeFrom:prototype];
}
- (XCSDPBAbilityScoreRequestBuilder*) builder {
  return [XCSDPBAbilityScoreRequest builder];
}
- (XCSDPBAbilityScoreRequestBuilder*) toBuilder {
  return [XCSDPBAbilityScoreRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasAbility) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ability", NSStringFromXCSDPBAbility(self.ability)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasAbility) {
    [dictionary setObject: @(self.ability) forKey: @"ability"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBAbilityScoreRequest class]]) {
    return NO;
  }
  XCSDPBAbilityScoreRequest *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAbility == otherMessage.hasAbility &&
      (!self.hasAbility || self.ability == otherMessage.ability) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasAbility) {
    hashCode = hashCode * 31 + self.ability;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBAbilityScoreRequestBuilder()
@property (strong) XCSDPBAbilityScoreRequest* resultAbilityScoreRequest;
@end

@implementation XCSDPBAbilityScoreRequestBuilder
@synthesize resultAbilityScoreRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAbilityScoreRequest = [[XCSDPBAbilityScoreRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAbilityScoreRequest;
}
- (XCSDPBAbilityScoreRequestBuilder*) clear {
  self.resultAbilityScoreRequest = [[XCSDPBAbilityScoreRequest alloc] init];
  return self;
}
- (XCSDPBAbilityScoreRequestBuilder*) clone {
  return [XCSDPBAbilityScoreRequest builderWithPrototype:resultAbilityScoreRequest];
}
- (XCSDPBAbilityScoreRequest*) defaultInstance {
  return [XCSDPBAbilityScoreRequest defaultInstance];
}
- (XCSDPBAbilityScoreRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBAbilityScoreRequest*) buildPartial {
  XCSDPBAbilityScoreRequest* returnMe = resultAbilityScoreRequest;
  self.resultAbilityScoreRequest = nil;
  return returnMe;
}
- (XCSDPBAbilityScoreRequestBuilder*) mergeFrom:(XCSDPBAbilityScoreRequest*) other {
  if (other == [XCSDPBAbilityScoreRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAbility) {
    [self setAbility:other.ability];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBAbilityScoreRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBAbilityScoreRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 16: {
        XCSDPBAbility value = (XCSDPBAbility)[input readEnum];
        if (XCSDPBAbilityIsValidValue(value)) {
          [self setAbility:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultAbilityScoreRequest.hasUserId;
}
- (SInt64) userId {
  return resultAbilityScoreRequest.userId;
}
- (XCSDPBAbilityScoreRequestBuilder*) setUserId:(SInt64) value {
  resultAbilityScoreRequest.hasUserId = YES;
  resultAbilityScoreRequest.userId = value;
  return self;
}
- (XCSDPBAbilityScoreRequestBuilder*) clearUserId {
  resultAbilityScoreRequest.hasUserId = NO;
  resultAbilityScoreRequest.userId = 0L;
  return self;
}
- (BOOL) hasAbility {
  return resultAbilityScoreRequest.hasAbility;
}
- (XCSDPBAbility) ability {
  return resultAbilityScoreRequest.ability;
}
- (XCSDPBAbilityScoreRequestBuilder*) setAbility:(XCSDPBAbility) value {
  resultAbilityScoreRequest.hasAbility = YES;
  resultAbilityScoreRequest.ability = value;
  return self;
}
- (XCSDPBAbilityScoreRequestBuilder*) clearAbility {
  resultAbilityScoreRequest.hasAbility = NO;
  resultAbilityScoreRequest.ability = XCSDPBAbilityAttention;
  return self;
}
@end

@interface XCSDPBAbilityScoreResponse ()
@property SInt32 totalScore;
@property (strong) NSMutableArray * gameListArray;
@end

@implementation XCSDPBAbilityScoreResponse

- (BOOL) hasTotalScore {
  return !!hasTotalScore_;
}
- (void) setHasTotalScore:(BOOL) _value_ {
  hasTotalScore_ = !!_value_;
}
@synthesize totalScore;
@synthesize gameListArray;
@dynamic gameList;
- (instancetype) init {
  if ((self = [super init])) {
    self.totalScore = 0;
  }
  return self;
}
static XCSDPBAbilityScoreResponse* defaultXCSDPBAbilityScoreResponseInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBAbilityScoreResponse class]) {
    defaultXCSDPBAbilityScoreResponseInstance = [[XCSDPBAbilityScoreResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBAbilityScoreResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBAbilityScoreResponseInstance;
}
- (NSArray *)gameList {
  return gameListArray;
}
- (XCSDPBAbilityScoreResponseGameScore*)gameListAtIndex:(NSUInteger)index {
  return [gameListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTotalScore) {
    return NO;
  }
  __block BOOL isInitgameList = YES;
   [self.gameList enumerateObjectsUsingBlock:^(XCSDPBAbilityScoreResponseGameScore *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgameList = NO;
      *stop = YES;
    }
  }];
  if (!isInitgameList) return isInitgameList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTotalScore) {
    [output writeInt32:1 value:self.totalScore];
  }
  [self.gameListArray enumerateObjectsUsingBlock:^(XCSDPBAbilityScoreResponseGameScore *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTotalScore) {
    size_ += computeInt32Size(1, self.totalScore);
  }
  [self.gameListArray enumerateObjectsUsingBlock:^(XCSDPBAbilityScoreResponseGameScore *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBAbilityScoreResponse*) parseFromData:(NSData*) data {
  return (XCSDPBAbilityScoreResponse*)[[[XCSDPBAbilityScoreResponse builder] mergeFromData:data] build];
}
+ (XCSDPBAbilityScoreResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreResponse*)[[[XCSDPBAbilityScoreResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreResponse*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBAbilityScoreResponse*)[[[XCSDPBAbilityScoreResponse builder] mergeFromInputStream:input] build];
}
+ (XCSDPBAbilityScoreResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreResponse*)[[[XCSDPBAbilityScoreResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBAbilityScoreResponse*)[[[XCSDPBAbilityScoreResponse builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBAbilityScoreResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreResponse*)[[[XCSDPBAbilityScoreResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreResponseBuilder*) builder {
  return [[XCSDPBAbilityScoreResponseBuilder alloc] init];
}
+ (XCSDPBAbilityScoreResponseBuilder*) builderWithPrototype:(XCSDPBAbilityScoreResponse*) prototype {
  return [[XCSDPBAbilityScoreResponse builder] mergeFrom:prototype];
}
- (XCSDPBAbilityScoreResponseBuilder*) builder {
  return [XCSDPBAbilityScoreResponse builder];
}
- (XCSDPBAbilityScoreResponseBuilder*) toBuilder {
  return [XCSDPBAbilityScoreResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTotalScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalScore", [NSNumber numberWithInteger:self.totalScore]];
  }
  [self.gameListArray enumerateObjectsUsingBlock:^(XCSDPBAbilityScoreResponseGameScore *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTotalScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalScore] forKey: @"totalScore"];
  }
  for (XCSDPBAbilityScoreResponseGameScore* element in self.gameListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"gameList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBAbilityScoreResponse class]]) {
    return NO;
  }
  XCSDPBAbilityScoreResponse *otherMessage = other;
  return
      self.hasTotalScore == otherMessage.hasTotalScore &&
      (!self.hasTotalScore || self.totalScore == otherMessage.totalScore) &&
      [self.gameListArray isEqualToArray:otherMessage.gameListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTotalScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalScore] hash];
  }
  [self.gameListArray enumerateObjectsUsingBlock:^(XCSDPBAbilityScoreResponseGameScore *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBAbilityScoreResponseGameScore ()
@property SInt32 gameId;
@property (strong) NSString* gameName;
@property SInt32 score;
@property SInt32 bestLevel;
@property Float64 percentage;
@property (strong) NSString* color;
@property SInt32 classRank;
@end

@implementation XCSDPBAbilityScoreResponseGameScore

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasGameName {
  return !!hasGameName_;
}
- (void) setHasGameName:(BOOL) _value_ {
  hasGameName_ = !!_value_;
}
@synthesize gameName;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) _value_ {
  hasScore_ = !!_value_;
}
@synthesize score;
- (BOOL) hasBestLevel {
  return !!hasBestLevel_;
}
- (void) setHasBestLevel:(BOOL) _value_ {
  hasBestLevel_ = !!_value_;
}
@synthesize bestLevel;
- (BOOL) hasPercentage {
  return !!hasPercentage_;
}
- (void) setHasPercentage:(BOOL) _value_ {
  hasPercentage_ = !!_value_;
}
@synthesize percentage;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (BOOL) hasClassRank {
  return !!hasClassRank_;
}
- (void) setHasClassRank:(BOOL) _value_ {
  hasClassRank_ = !!_value_;
}
@synthesize classRank;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameId = 0;
    self.gameName = @"";
    self.score = 0;
    self.bestLevel = 0;
    self.percentage = 0;
    self.color = @"";
    self.classRank = 0;
  }
  return self;
}
static XCSDPBAbilityScoreResponseGameScore* defaultXCSDPBAbilityScoreResponseGameScoreInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBAbilityScoreResponseGameScore class]) {
    defaultXCSDPBAbilityScoreResponseGameScoreInstance = [[XCSDPBAbilityScoreResponseGameScore alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBAbilityScoreResponseGameScoreInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBAbilityScoreResponseGameScoreInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeInt32:1 value:self.gameId];
  }
  if (self.hasGameName) {
    [output writeString:2 value:self.gameName];
  }
  if (self.hasScore) {
    [output writeInt32:3 value:self.score];
  }
  if (self.hasBestLevel) {
    [output writeInt32:4 value:self.bestLevel];
  }
  if (self.hasPercentage) {
    [output writeDouble:5 value:self.percentage];
  }
  if (self.hasColor) {
    [output writeString:6 value:self.color];
  }
  if (self.hasClassRank) {
    [output writeInt32:7 value:self.classRank];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameId) {
    size_ += computeInt32Size(1, self.gameId);
  }
  if (self.hasGameName) {
    size_ += computeStringSize(2, self.gameName);
  }
  if (self.hasScore) {
    size_ += computeInt32Size(3, self.score);
  }
  if (self.hasBestLevel) {
    size_ += computeInt32Size(4, self.bestLevel);
  }
  if (self.hasPercentage) {
    size_ += computeDoubleSize(5, self.percentage);
  }
  if (self.hasColor) {
    size_ += computeStringSize(6, self.color);
  }
  if (self.hasClassRank) {
    size_ += computeInt32Size(7, self.classRank);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBAbilityScoreResponseGameScore*) parseFromData:(NSData*) data {
  return (XCSDPBAbilityScoreResponseGameScore*)[[[XCSDPBAbilityScoreResponseGameScore builder] mergeFromData:data] build];
}
+ (XCSDPBAbilityScoreResponseGameScore*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreResponseGameScore*)[[[XCSDPBAbilityScoreResponseGameScore builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreResponseGameScore*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBAbilityScoreResponseGameScore*)[[[XCSDPBAbilityScoreResponseGameScore builder] mergeFromInputStream:input] build];
}
+ (XCSDPBAbilityScoreResponseGameScore*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreResponseGameScore*)[[[XCSDPBAbilityScoreResponseGameScore builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreResponseGameScore*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBAbilityScoreResponseGameScore*)[[[XCSDPBAbilityScoreResponseGameScore builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBAbilityScoreResponseGameScore*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBAbilityScoreResponseGameScore*)[[[XCSDPBAbilityScoreResponseGameScore builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBAbilityScoreResponseGameScoreBuilder*) builder {
  return [[XCSDPBAbilityScoreResponseGameScoreBuilder alloc] init];
}
+ (XCSDPBAbilityScoreResponseGameScoreBuilder*) builderWithPrototype:(XCSDPBAbilityScoreResponseGameScore*) prototype {
  return [[XCSDPBAbilityScoreResponseGameScore builder] mergeFrom:prototype];
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) builder {
  return [XCSDPBAbilityScoreResponseGameScore builder];
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) toBuilder {
  return [XCSDPBAbilityScoreResponseGameScore builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", [NSNumber numberWithInteger:self.gameId]];
  }
  if (self.hasGameName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameName", self.gameName];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInteger:self.score]];
  }
  if (self.hasBestLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bestLevel", [NSNumber numberWithInteger:self.bestLevel]];
  }
  if (self.hasPercentage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"percentage", [NSNumber numberWithDouble:self.percentage]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", self.color];
  }
  if (self.hasClassRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classRank", [NSNumber numberWithInteger:self.classRank]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGameId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gameId] forKey: @"gameId"];
  }
  if (self.hasGameName) {
    [dictionary setObject: self.gameName forKey: @"gameName"];
  }
  if (self.hasScore) {
    [dictionary setObject: [NSNumber numberWithInteger:self.score] forKey: @"score"];
  }
  if (self.hasBestLevel) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bestLevel] forKey: @"bestLevel"];
  }
  if (self.hasPercentage) {
    [dictionary setObject: [NSNumber numberWithDouble:self.percentage] forKey: @"percentage"];
  }
  if (self.hasColor) {
    [dictionary setObject: self.color forKey: @"color"];
  }
  if (self.hasClassRank) {
    [dictionary setObject: [NSNumber numberWithInteger:self.classRank] forKey: @"classRank"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBAbilityScoreResponseGameScore class]]) {
    return NO;
  }
  XCSDPBAbilityScoreResponseGameScore *otherMessage = other;
  return
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || self.gameId == otherMessage.gameId) &&
      self.hasGameName == otherMessage.hasGameName &&
      (!self.hasGameName || [self.gameName isEqual:otherMessage.gameName]) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      self.hasBestLevel == otherMessage.hasBestLevel &&
      (!self.hasBestLevel || self.bestLevel == otherMessage.bestLevel) &&
      self.hasPercentage == otherMessage.hasPercentage &&
      (!self.hasPercentage || self.percentage == otherMessage.percentage) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || [self.color isEqual:otherMessage.color]) &&
      self.hasClassRank == otherMessage.hasClassRank &&
      (!self.hasClassRank || self.classRank == otherMessage.classRank) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gameId] hash];
  }
  if (self.hasGameName) {
    hashCode = hashCode * 31 + [self.gameName hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.score] hash];
  }
  if (self.hasBestLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bestLevel] hash];
  }
  if (self.hasPercentage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.percentage] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [self.color hash];
  }
  if (self.hasClassRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.classRank] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBAbilityScoreResponseGameScoreBuilder()
@property (strong) XCSDPBAbilityScoreResponseGameScore* resultGameScore;
@end

@implementation XCSDPBAbilityScoreResponseGameScoreBuilder
@synthesize resultGameScore;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameScore = [[XCSDPBAbilityScoreResponseGameScore alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameScore;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clear {
  self.resultGameScore = [[XCSDPBAbilityScoreResponseGameScore alloc] init];
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clone {
  return [XCSDPBAbilityScoreResponseGameScore builderWithPrototype:resultGameScore];
}
- (XCSDPBAbilityScoreResponseGameScore*) defaultInstance {
  return [XCSDPBAbilityScoreResponseGameScore defaultInstance];
}
- (XCSDPBAbilityScoreResponseGameScore*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBAbilityScoreResponseGameScore*) buildPartial {
  XCSDPBAbilityScoreResponseGameScore* returnMe = resultGameScore;
  self.resultGameScore = nil;
  return returnMe;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) mergeFrom:(XCSDPBAbilityScoreResponseGameScore*) other {
  if (other == [XCSDPBAbilityScoreResponseGameScore defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasGameName) {
    [self setGameName:other.gameName];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasBestLevel) {
    [self setBestLevel:other.bestLevel];
  }
  if (other.hasPercentage) {
    [self setPercentage:other.percentage];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasClassRank) {
    [self setClassRank:other.classRank];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGameId:[input readInt32]];
        break;
      }
      case 18: {
        [self setGameName:[input readString]];
        break;
      }
      case 24: {
        [self setScore:[input readInt32]];
        break;
      }
      case 32: {
        [self setBestLevel:[input readInt32]];
        break;
      }
      case 41: {
        [self setPercentage:[input readDouble]];
        break;
      }
      case 50: {
        [self setColor:[input readString]];
        break;
      }
      case 56: {
        [self setClassRank:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return resultGameScore.hasGameId;
}
- (SInt32) gameId {
  return resultGameScore.gameId;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) setGameId:(SInt32) value {
  resultGameScore.hasGameId = YES;
  resultGameScore.gameId = value;
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clearGameId {
  resultGameScore.hasGameId = NO;
  resultGameScore.gameId = 0;
  return self;
}
- (BOOL) hasGameName {
  return resultGameScore.hasGameName;
}
- (NSString*) gameName {
  return resultGameScore.gameName;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) setGameName:(NSString*) value {
  resultGameScore.hasGameName = YES;
  resultGameScore.gameName = value;
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clearGameName {
  resultGameScore.hasGameName = NO;
  resultGameScore.gameName = @"";
  return self;
}
- (BOOL) hasScore {
  return resultGameScore.hasScore;
}
- (SInt32) score {
  return resultGameScore.score;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) setScore:(SInt32) value {
  resultGameScore.hasScore = YES;
  resultGameScore.score = value;
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clearScore {
  resultGameScore.hasScore = NO;
  resultGameScore.score = 0;
  return self;
}
- (BOOL) hasBestLevel {
  return resultGameScore.hasBestLevel;
}
- (SInt32) bestLevel {
  return resultGameScore.bestLevel;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) setBestLevel:(SInt32) value {
  resultGameScore.hasBestLevel = YES;
  resultGameScore.bestLevel = value;
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clearBestLevel {
  resultGameScore.hasBestLevel = NO;
  resultGameScore.bestLevel = 0;
  return self;
}
- (BOOL) hasPercentage {
  return resultGameScore.hasPercentage;
}
- (Float64) percentage {
  return resultGameScore.percentage;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) setPercentage:(Float64) value {
  resultGameScore.hasPercentage = YES;
  resultGameScore.percentage = value;
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clearPercentage {
  resultGameScore.hasPercentage = NO;
  resultGameScore.percentage = 0;
  return self;
}
- (BOOL) hasColor {
  return resultGameScore.hasColor;
}
- (NSString*) color {
  return resultGameScore.color;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) setColor:(NSString*) value {
  resultGameScore.hasColor = YES;
  resultGameScore.color = value;
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clearColor {
  resultGameScore.hasColor = NO;
  resultGameScore.color = @"";
  return self;
}
- (BOOL) hasClassRank {
  return resultGameScore.hasClassRank;
}
- (SInt32) classRank {
  return resultGameScore.classRank;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) setClassRank:(SInt32) value {
  resultGameScore.hasClassRank = YES;
  resultGameScore.classRank = value;
  return self;
}
- (XCSDPBAbilityScoreResponseGameScoreBuilder*) clearClassRank {
  resultGameScore.hasClassRank = NO;
  resultGameScore.classRank = 0;
  return self;
}
@end

@interface XCSDPBAbilityScoreResponseBuilder()
@property (strong) XCSDPBAbilityScoreResponse* resultAbilityScoreResponse;
@end

@implementation XCSDPBAbilityScoreResponseBuilder
@synthesize resultAbilityScoreResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAbilityScoreResponse = [[XCSDPBAbilityScoreResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAbilityScoreResponse;
}
- (XCSDPBAbilityScoreResponseBuilder*) clear {
  self.resultAbilityScoreResponse = [[XCSDPBAbilityScoreResponse alloc] init];
  return self;
}
- (XCSDPBAbilityScoreResponseBuilder*) clone {
  return [XCSDPBAbilityScoreResponse builderWithPrototype:resultAbilityScoreResponse];
}
- (XCSDPBAbilityScoreResponse*) defaultInstance {
  return [XCSDPBAbilityScoreResponse defaultInstance];
}
- (XCSDPBAbilityScoreResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBAbilityScoreResponse*) buildPartial {
  XCSDPBAbilityScoreResponse* returnMe = resultAbilityScoreResponse;
  self.resultAbilityScoreResponse = nil;
  return returnMe;
}
- (XCSDPBAbilityScoreResponseBuilder*) mergeFrom:(XCSDPBAbilityScoreResponse*) other {
  if (other == [XCSDPBAbilityScoreResponse defaultInstance]) {
    return self;
  }
  if (other.hasTotalScore) {
    [self setTotalScore:other.totalScore];
  }
  if (other.gameListArray.count > 0) {
    if (resultAbilityScoreResponse.gameListArray == nil) {
      resultAbilityScoreResponse.gameListArray = [[NSMutableArray alloc] initWithArray:other.gameListArray];
    } else {
      [resultAbilityScoreResponse.gameListArray addObjectsFromArray:other.gameListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBAbilityScoreResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBAbilityScoreResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTotalScore:[input readInt32]];
        break;
      }
      case 18: {
        XCSDPBAbilityScoreResponseGameScoreBuilder* subBuilder = [XCSDPBAbilityScoreResponseGameScore builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGameList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTotalScore {
  return resultAbilityScoreResponse.hasTotalScore;
}
- (SInt32) totalScore {
  return resultAbilityScoreResponse.totalScore;
}
- (XCSDPBAbilityScoreResponseBuilder*) setTotalScore:(SInt32) value {
  resultAbilityScoreResponse.hasTotalScore = YES;
  resultAbilityScoreResponse.totalScore = value;
  return self;
}
- (XCSDPBAbilityScoreResponseBuilder*) clearTotalScore {
  resultAbilityScoreResponse.hasTotalScore = NO;
  resultAbilityScoreResponse.totalScore = 0;
  return self;
}
- (NSMutableArray *)gameList {
  return resultAbilityScoreResponse.gameListArray;
}
- (XCSDPBAbilityScoreResponseGameScore*)gameListAtIndex:(NSUInteger)index {
  return [resultAbilityScoreResponse gameListAtIndex:index];
}
- (XCSDPBAbilityScoreResponseBuilder *)addGameList:(XCSDPBAbilityScoreResponseGameScore*)value {
  if (resultAbilityScoreResponse.gameListArray == nil) {
    resultAbilityScoreResponse.gameListArray = [[NSMutableArray alloc]init];
  }
  [resultAbilityScoreResponse.gameListArray addObject:value];
  return self;
}
- (XCSDPBAbilityScoreResponseBuilder *)setGameListArray:(NSArray *)array {
  resultAbilityScoreResponse.gameListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XCSDPBAbilityScoreResponseBuilder *)clearGameList {
  resultAbilityScoreResponse.gameListArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
