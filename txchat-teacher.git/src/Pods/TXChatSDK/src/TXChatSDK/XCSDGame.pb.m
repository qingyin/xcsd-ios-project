// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "XCSDGame.pb.h"
// @@protoc_insertion_point(imports)

@implementation XCSDPBXcsdgameRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [XCSDPBXcsdgameRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface XCSDPBGameListRequest ()
@end

@implementation XCSDPBGameListRequest

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static XCSDPBGameListRequest* defaultXCSDPBGameListRequestInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBGameListRequest class]) {
    defaultXCSDPBGameListRequestInstance = [[XCSDPBGameListRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBGameListRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBGameListRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBGameListRequest*) parseFromData:(NSData*) data {
  return (XCSDPBGameListRequest*)[[[XCSDPBGameListRequest builder] mergeFromData:data] build];
}
+ (XCSDPBGameListRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListRequest*)[[[XCSDPBGameListRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListRequest*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBGameListRequest*)[[[XCSDPBGameListRequest builder] mergeFromInputStream:input] build];
}
+ (XCSDPBGameListRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListRequest*)[[[XCSDPBGameListRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBGameListRequest*)[[[XCSDPBGameListRequest builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBGameListRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListRequest*)[[[XCSDPBGameListRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListRequestBuilder*) builder {
  return [[XCSDPBGameListRequestBuilder alloc] init];
}
+ (XCSDPBGameListRequestBuilder*) builderWithPrototype:(XCSDPBGameListRequest*) prototype {
  return [[XCSDPBGameListRequest builder] mergeFrom:prototype];
}
- (XCSDPBGameListRequestBuilder*) builder {
  return [XCSDPBGameListRequest builder];
}
- (XCSDPBGameListRequestBuilder*) toBuilder {
  return [XCSDPBGameListRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBGameListRequest class]]) {
    return NO;
  }
  XCSDPBGameListRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBGameListRequestBuilder()
@property (strong) XCSDPBGameListRequest* resultGameListRequest;
@end

@implementation XCSDPBGameListRequestBuilder
@synthesize resultGameListRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameListRequest = [[XCSDPBGameListRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameListRequest;
}
- (XCSDPBGameListRequestBuilder*) clear {
  self.resultGameListRequest = [[XCSDPBGameListRequest alloc] init];
  return self;
}
- (XCSDPBGameListRequestBuilder*) clone {
  return [XCSDPBGameListRequest builderWithPrototype:resultGameListRequest];
}
- (XCSDPBGameListRequest*) defaultInstance {
  return [XCSDPBGameListRequest defaultInstance];
}
- (XCSDPBGameListRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBGameListRequest*) buildPartial {
  XCSDPBGameListRequest* returnMe = resultGameListRequest;
  self.resultGameListRequest = nil;
  return returnMe;
}
- (XCSDPBGameListRequestBuilder*) mergeFrom:(XCSDPBGameListRequest*) other {
  if (other == [XCSDPBGameListRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBGameListRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBGameListRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface XCSDPBGameListResponse ()
@property (strong) NSMutableArray * gameListArray;
@end

@implementation XCSDPBGameListResponse

@synthesize gameListArray;
@dynamic gameList;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static XCSDPBGameListResponse* defaultXCSDPBGameListResponseInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBGameListResponse class]) {
    defaultXCSDPBGameListResponseInstance = [[XCSDPBGameListResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBGameListResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBGameListResponseInstance;
}
- (NSArray *)gameList {
  return gameListArray;
}
- (XCSDPBGameListResponseGame*)gameListAtIndex:(NSUInteger)index {
  return [gameListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitgameList = YES;
   [self.gameList enumerateObjectsUsingBlock:^(XCSDPBGameListResponseGame *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgameList = NO;
      *stop = YES;
    }
  }];
  if (!isInitgameList) return isInitgameList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.gameListArray enumerateObjectsUsingBlock:^(XCSDPBGameListResponseGame *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.gameListArray enumerateObjectsUsingBlock:^(XCSDPBGameListResponseGame *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBGameListResponse*) parseFromData:(NSData*) data {
  return (XCSDPBGameListResponse*)[[[XCSDPBGameListResponse builder] mergeFromData:data] build];
}
+ (XCSDPBGameListResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListResponse*)[[[XCSDPBGameListResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListResponse*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBGameListResponse*)[[[XCSDPBGameListResponse builder] mergeFromInputStream:input] build];
}
+ (XCSDPBGameListResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListResponse*)[[[XCSDPBGameListResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBGameListResponse*)[[[XCSDPBGameListResponse builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBGameListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListResponse*)[[[XCSDPBGameListResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListResponseBuilder*) builder {
  return [[XCSDPBGameListResponseBuilder alloc] init];
}
+ (XCSDPBGameListResponseBuilder*) builderWithPrototype:(XCSDPBGameListResponse*) prototype {
  return [[XCSDPBGameListResponse builder] mergeFrom:prototype];
}
- (XCSDPBGameListResponseBuilder*) builder {
  return [XCSDPBGameListResponse builder];
}
- (XCSDPBGameListResponseBuilder*) toBuilder {
  return [XCSDPBGameListResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.gameListArray enumerateObjectsUsingBlock:^(XCSDPBGameListResponseGame *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (XCSDPBGameListResponseGame* element in self.gameListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"gameList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBGameListResponse class]]) {
    return NO;
  }
  XCSDPBGameListResponse *otherMessage = other;
  return
      [self.gameListArray isEqualToArray:otherMessage.gameListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.gameListArray enumerateObjectsUsingBlock:^(XCSDPBGameListResponseGame *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBGameListResponseGame ()
@property SInt64 gameId;
@property (strong) NSString* gameName;
@property (strong) NSString* abilityName;
@property SInt32 levelCount;
@property (strong) NSString* picUrl;
@property (strong) NSString* color;
@end

@implementation XCSDPBGameListResponseGame

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasGameName {
  return !!hasGameName_;
}
- (void) setHasGameName:(BOOL) _value_ {
  hasGameName_ = !!_value_;
}
@synthesize gameName;
- (BOOL) hasAbilityName {
  return !!hasAbilityName_;
}
- (void) setHasAbilityName:(BOOL) _value_ {
  hasAbilityName_ = !!_value_;
}
@synthesize abilityName;
- (BOOL) hasLevelCount {
  return !!hasLevelCount_;
}
- (void) setHasLevelCount:(BOOL) _value_ {
  hasLevelCount_ = !!_value_;
}
@synthesize levelCount;
- (BOOL) hasPicUrl {
  return !!hasPicUrl_;
}
- (void) setHasPicUrl:(BOOL) _value_ {
  hasPicUrl_ = !!_value_;
}
@synthesize picUrl;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (instancetype) init {
  if ((self = [super init])) {
    self.gameId = 0L;
    self.gameName = @"";
    self.abilityName = @"";
    self.levelCount = 0;
    self.picUrl = @"";
    self.color = @"";
  }
  return self;
}
static XCSDPBGameListResponseGame* defaultXCSDPBGameListResponseGameInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBGameListResponseGame class]) {
    defaultXCSDPBGameListResponseGameInstance = [[XCSDPBGameListResponseGame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBGameListResponseGameInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBGameListResponseGameInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeInt64:1 value:self.gameId];
  }
  if (self.hasGameName) {
    [output writeString:2 value:self.gameName];
  }
  if (self.hasAbilityName) {
    [output writeString:3 value:self.abilityName];
  }
  if (self.hasLevelCount) {
    [output writeInt32:4 value:self.levelCount];
  }
  if (self.hasPicUrl) {
    [output writeString:5 value:self.picUrl];
  }
  if (self.hasColor) {
    [output writeString:6 value:self.color];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameId) {
    size_ += computeInt64Size(1, self.gameId);
  }
  if (self.hasGameName) {
    size_ += computeStringSize(2, self.gameName);
  }
  if (self.hasAbilityName) {
    size_ += computeStringSize(3, self.abilityName);
  }
  if (self.hasLevelCount) {
    size_ += computeInt32Size(4, self.levelCount);
  }
  if (self.hasPicUrl) {
    size_ += computeStringSize(5, self.picUrl);
  }
  if (self.hasColor) {
    size_ += computeStringSize(6, self.color);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBGameListResponseGame*) parseFromData:(NSData*) data {
  return (XCSDPBGameListResponseGame*)[[[XCSDPBGameListResponseGame builder] mergeFromData:data] build];
}
+ (XCSDPBGameListResponseGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListResponseGame*)[[[XCSDPBGameListResponseGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListResponseGame*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBGameListResponseGame*)[[[XCSDPBGameListResponseGame builder] mergeFromInputStream:input] build];
}
+ (XCSDPBGameListResponseGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListResponseGame*)[[[XCSDPBGameListResponseGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListResponseGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBGameListResponseGame*)[[[XCSDPBGameListResponseGame builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBGameListResponseGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameListResponseGame*)[[[XCSDPBGameListResponseGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameListResponseGameBuilder*) builder {
  return [[XCSDPBGameListResponseGameBuilder alloc] init];
}
+ (XCSDPBGameListResponseGameBuilder*) builderWithPrototype:(XCSDPBGameListResponseGame*) prototype {
  return [[XCSDPBGameListResponseGame builder] mergeFrom:prototype];
}
- (XCSDPBGameListResponseGameBuilder*) builder {
  return [XCSDPBGameListResponseGame builder];
}
- (XCSDPBGameListResponseGameBuilder*) toBuilder {
  return [XCSDPBGameListResponseGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", [NSNumber numberWithLongLong:self.gameId]];
  }
  if (self.hasGameName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameName", self.gameName];
  }
  if (self.hasAbilityName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abilityName", self.abilityName];
  }
  if (self.hasLevelCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"levelCount", [NSNumber numberWithInteger:self.levelCount]];
  }
  if (self.hasPicUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"picUrl", self.picUrl];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", self.color];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGameId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.gameId] forKey: @"gameId"];
  }
  if (self.hasGameName) {
    [dictionary setObject: self.gameName forKey: @"gameName"];
  }
  if (self.hasAbilityName) {
    [dictionary setObject: self.abilityName forKey: @"abilityName"];
  }
  if (self.hasLevelCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.levelCount] forKey: @"levelCount"];
  }
  if (self.hasPicUrl) {
    [dictionary setObject: self.picUrl forKey: @"picUrl"];
  }
  if (self.hasColor) {
    [dictionary setObject: self.color forKey: @"color"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBGameListResponseGame class]]) {
    return NO;
  }
  XCSDPBGameListResponseGame *otherMessage = other;
  return
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || self.gameId == otherMessage.gameId) &&
      self.hasGameName == otherMessage.hasGameName &&
      (!self.hasGameName || [self.gameName isEqual:otherMessage.gameName]) &&
      self.hasAbilityName == otherMessage.hasAbilityName &&
      (!self.hasAbilityName || [self.abilityName isEqual:otherMessage.abilityName]) &&
      self.hasLevelCount == otherMessage.hasLevelCount &&
      (!self.hasLevelCount || self.levelCount == otherMessage.levelCount) &&
      self.hasPicUrl == otherMessage.hasPicUrl &&
      (!self.hasPicUrl || [self.picUrl isEqual:otherMessage.picUrl]) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || [self.color isEqual:otherMessage.color]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.gameId] hash];
  }
  if (self.hasGameName) {
    hashCode = hashCode * 31 + [self.gameName hash];
  }
  if (self.hasAbilityName) {
    hashCode = hashCode * 31 + [self.abilityName hash];
  }
  if (self.hasLevelCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.levelCount] hash];
  }
  if (self.hasPicUrl) {
    hashCode = hashCode * 31 + [self.picUrl hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [self.color hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBGameListResponseGameBuilder()
@property (strong) XCSDPBGameListResponseGame* resultGame;
@end

@implementation XCSDPBGameListResponseGameBuilder
@synthesize resultGame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGame = [[XCSDPBGameListResponseGame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGame;
}
- (XCSDPBGameListResponseGameBuilder*) clear {
  self.resultGame = [[XCSDPBGameListResponseGame alloc] init];
  return self;
}
- (XCSDPBGameListResponseGameBuilder*) clone {
  return [XCSDPBGameListResponseGame builderWithPrototype:resultGame];
}
- (XCSDPBGameListResponseGame*) defaultInstance {
  return [XCSDPBGameListResponseGame defaultInstance];
}
- (XCSDPBGameListResponseGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBGameListResponseGame*) buildPartial {
  XCSDPBGameListResponseGame* returnMe = resultGame;
  self.resultGame = nil;
  return returnMe;
}
- (XCSDPBGameListResponseGameBuilder*) mergeFrom:(XCSDPBGameListResponseGame*) other {
  if (other == [XCSDPBGameListResponseGame defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasGameName) {
    [self setGameName:other.gameName];
  }
  if (other.hasAbilityName) {
    [self setAbilityName:other.abilityName];
  }
  if (other.hasLevelCount) {
    [self setLevelCount:other.levelCount];
  }
  if (other.hasPicUrl) {
    [self setPicUrl:other.picUrl];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBGameListResponseGameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBGameListResponseGameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGameId:[input readInt64]];
        break;
      }
      case 18: {
        [self setGameName:[input readString]];
        break;
      }
      case 26: {
        [self setAbilityName:[input readString]];
        break;
      }
      case 32: {
        [self setLevelCount:[input readInt32]];
        break;
      }
      case 42: {
        [self setPicUrl:[input readString]];
        break;
      }
      case 50: {
        [self setColor:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return resultGame.hasGameId;
}
- (SInt64) gameId {
  return resultGame.gameId;
}
- (XCSDPBGameListResponseGameBuilder*) setGameId:(SInt64) value {
  resultGame.hasGameId = YES;
  resultGame.gameId = value;
  return self;
}
- (XCSDPBGameListResponseGameBuilder*) clearGameId {
  resultGame.hasGameId = NO;
  resultGame.gameId = 0L;
  return self;
}
- (BOOL) hasGameName {
  return resultGame.hasGameName;
}
- (NSString*) gameName {
  return resultGame.gameName;
}
- (XCSDPBGameListResponseGameBuilder*) setGameName:(NSString*) value {
  resultGame.hasGameName = YES;
  resultGame.gameName = value;
  return self;
}
- (XCSDPBGameListResponseGameBuilder*) clearGameName {
  resultGame.hasGameName = NO;
  resultGame.gameName = @"";
  return self;
}
- (BOOL) hasAbilityName {
  return resultGame.hasAbilityName;
}
- (NSString*) abilityName {
  return resultGame.abilityName;
}
- (XCSDPBGameListResponseGameBuilder*) setAbilityName:(NSString*) value {
  resultGame.hasAbilityName = YES;
  resultGame.abilityName = value;
  return self;
}
- (XCSDPBGameListResponseGameBuilder*) clearAbilityName {
  resultGame.hasAbilityName = NO;
  resultGame.abilityName = @"";
  return self;
}
- (BOOL) hasLevelCount {
  return resultGame.hasLevelCount;
}
- (SInt32) levelCount {
  return resultGame.levelCount;
}
- (XCSDPBGameListResponseGameBuilder*) setLevelCount:(SInt32) value {
  resultGame.hasLevelCount = YES;
  resultGame.levelCount = value;
  return self;
}
- (XCSDPBGameListResponseGameBuilder*) clearLevelCount {
  resultGame.hasLevelCount = NO;
  resultGame.levelCount = 0;
  return self;
}
- (BOOL) hasPicUrl {
  return resultGame.hasPicUrl;
}
- (NSString*) picUrl {
  return resultGame.picUrl;
}
- (XCSDPBGameListResponseGameBuilder*) setPicUrl:(NSString*) value {
  resultGame.hasPicUrl = YES;
  resultGame.picUrl = value;
  return self;
}
- (XCSDPBGameListResponseGameBuilder*) clearPicUrl {
  resultGame.hasPicUrl = NO;
  resultGame.picUrl = @"";
  return self;
}
- (BOOL) hasColor {
  return resultGame.hasColor;
}
- (NSString*) color {
  return resultGame.color;
}
- (XCSDPBGameListResponseGameBuilder*) setColor:(NSString*) value {
  resultGame.hasColor = YES;
  resultGame.color = value;
  return self;
}
- (XCSDPBGameListResponseGameBuilder*) clearColor {
  resultGame.hasColor = NO;
  resultGame.color = @"";
  return self;
}
@end

@interface XCSDPBGameListResponseBuilder()
@property (strong) XCSDPBGameListResponse* resultGameListResponse;
@end

@implementation XCSDPBGameListResponseBuilder
@synthesize resultGameListResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameListResponse = [[XCSDPBGameListResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameListResponse;
}
- (XCSDPBGameListResponseBuilder*) clear {
  self.resultGameListResponse = [[XCSDPBGameListResponse alloc] init];
  return self;
}
- (XCSDPBGameListResponseBuilder*) clone {
  return [XCSDPBGameListResponse builderWithPrototype:resultGameListResponse];
}
- (XCSDPBGameListResponse*) defaultInstance {
  return [XCSDPBGameListResponse defaultInstance];
}
- (XCSDPBGameListResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBGameListResponse*) buildPartial {
  XCSDPBGameListResponse* returnMe = resultGameListResponse;
  self.resultGameListResponse = nil;
  return returnMe;
}
- (XCSDPBGameListResponseBuilder*) mergeFrom:(XCSDPBGameListResponse*) other {
  if (other == [XCSDPBGameListResponse defaultInstance]) {
    return self;
  }
  if (other.gameListArray.count > 0) {
    if (resultGameListResponse.gameListArray == nil) {
      resultGameListResponse.gameListArray = [[NSMutableArray alloc] initWithArray:other.gameListArray];
    } else {
      [resultGameListResponse.gameListArray addObjectsFromArray:other.gameListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBGameListResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBGameListResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        XCSDPBGameListResponseGameBuilder* subBuilder = [XCSDPBGameListResponseGame builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGameList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)gameList {
  return resultGameListResponse.gameListArray;
}
- (XCSDPBGameListResponseGame*)gameListAtIndex:(NSUInteger)index {
  return [resultGameListResponse gameListAtIndex:index];
}
- (XCSDPBGameListResponseBuilder *)addGameList:(XCSDPBGameListResponseGame*)value {
  if (resultGameListResponse.gameListArray == nil) {
    resultGameListResponse.gameListArray = [[NSMutableArray alloc]init];
  }
  [resultGameListResponse.gameListArray addObject:value];
  return self;
}
- (XCSDPBGameListResponseBuilder *)setGameListArray:(NSArray *)array {
  resultGameListResponse.gameListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XCSDPBGameListResponseBuilder *)clearGameList {
  resultGameListResponse.gameListArray = nil;
  return self;
}
@end

@interface XCSDPBGameLevel ()
@property SInt64 gameId;
@property SInt32 level;
@property (strong) NSString* gameName;
@property (strong) NSString* abilityName;
@property (strong) NSString* picUrl;
@property SInt32 stars;
@property (strong) NSString* color;
@property SInt32 abilityId;
@property BOOL hasGuide;
@end

@implementation XCSDPBGameLevel

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) _value_ {
  hasGameId_ = !!_value_;
}
@synthesize gameId;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasGameName {
  return !!hasGameName_;
}
- (void) setHasGameName:(BOOL) _value_ {
  hasGameName_ = !!_value_;
}
@synthesize gameName;
- (BOOL) hasAbilityName {
  return !!hasAbilityName_;
}
- (void) setHasAbilityName:(BOOL) _value_ {
  hasAbilityName_ = !!_value_;
}
@synthesize abilityName;
- (BOOL) hasPicUrl {
  return !!hasPicUrl_;
}
- (void) setHasPicUrl:(BOOL) _value_ {
  hasPicUrl_ = !!_value_;
}
@synthesize picUrl;
- (BOOL) hasStars {
  return !!hasStars_;
}
- (void) setHasStars:(BOOL) _value_ {
  hasStars_ = !!_value_;
}
@synthesize stars;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (BOOL) hasAbilityId {
  return !!hasAbilityId_;
}
- (void) setHasAbilityId:(BOOL) _value_ {
  hasAbilityId_ = !!_value_;
}
@synthesize abilityId;
- (BOOL) hasHasGuide {
  return !!hasHasGuide_;
}
- (void) setHasHasGuide:(BOOL) _value_ {
  hasHasGuide_ = !!_value_;
}
- (BOOL) hasGuide {
  return !!hasGuide_;
}
- (void) setHasGuide:(BOOL) _value_ {
  hasGuide_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.gameId = 0L;
    self.level = 0;
    self.gameName = @"";
    self.abilityName = @"";
    self.picUrl = @"";
    self.stars = 0;
    self.color = @"";
    self.abilityId = 0;
    self.hasGuide = NO;
  }
  return self;
}
static XCSDPBGameLevel* defaultXCSDPBGameLevelInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBGameLevel class]) {
    defaultXCSDPBGameLevelInstance = [[XCSDPBGameLevel alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBGameLevelInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBGameLevelInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGameId) {
    return NO;
  }
  if (!self.hasLevel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeInt64:1 value:self.gameId];
  }
  if (self.hasLevel) {
    [output writeInt32:2 value:self.level];
  }
  if (self.hasGameName) {
    [output writeString:3 value:self.gameName];
  }
  if (self.hasAbilityName) {
    [output writeString:4 value:self.abilityName];
  }
  if (self.hasPicUrl) {
    [output writeString:5 value:self.picUrl];
  }
  if (self.hasStars) {
    [output writeInt32:6 value:self.stars];
  }
  if (self.hasColor) {
    [output writeString:7 value:self.color];
  }
  if (self.hasAbilityId) {
    [output writeInt32:8 value:self.abilityId];
  }
  if (self.hasHasGuide) {
    [output writeBool:9 value:self.hasGuide];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameId) {
    size_ += computeInt64Size(1, self.gameId);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(2, self.level);
  }
  if (self.hasGameName) {
    size_ += computeStringSize(3, self.gameName);
  }
  if (self.hasAbilityName) {
    size_ += computeStringSize(4, self.abilityName);
  }
  if (self.hasPicUrl) {
    size_ += computeStringSize(5, self.picUrl);
  }
  if (self.hasStars) {
    size_ += computeInt32Size(6, self.stars);
  }
  if (self.hasColor) {
    size_ += computeStringSize(7, self.color);
  }
  if (self.hasAbilityId) {
    size_ += computeInt32Size(8, self.abilityId);
  }
  if (self.hasHasGuide) {
    size_ += computeBoolSize(9, self.hasGuide);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBGameLevel*) parseFromData:(NSData*) data {
  return (XCSDPBGameLevel*)[[[XCSDPBGameLevel builder] mergeFromData:data] build];
}
+ (XCSDPBGameLevel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameLevel*)[[[XCSDPBGameLevel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameLevel*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBGameLevel*)[[[XCSDPBGameLevel builder] mergeFromInputStream:input] build];
}
+ (XCSDPBGameLevel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameLevel*)[[[XCSDPBGameLevel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameLevel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBGameLevel*)[[[XCSDPBGameLevel builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBGameLevel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBGameLevel*)[[[XCSDPBGameLevel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBGameLevelBuilder*) builder {
  return [[XCSDPBGameLevelBuilder alloc] init];
}
+ (XCSDPBGameLevelBuilder*) builderWithPrototype:(XCSDPBGameLevel*) prototype {
  return [[XCSDPBGameLevel builder] mergeFrom:prototype];
}
- (XCSDPBGameLevelBuilder*) builder {
  return [XCSDPBGameLevel builder];
}
- (XCSDPBGameLevelBuilder*) toBuilder {
  return [XCSDPBGameLevel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", [NSNumber numberWithLongLong:self.gameId]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasGameName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameName", self.gameName];
  }
  if (self.hasAbilityName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abilityName", self.abilityName];
  }
  if (self.hasPicUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"picUrl", self.picUrl];
  }
  if (self.hasStars) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stars", [NSNumber numberWithInteger:self.stars]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", self.color];
  }
  if (self.hasAbilityId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abilityId", [NSNumber numberWithInteger:self.abilityId]];
  }
  if (self.hasHasGuide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasGuide", [NSNumber numberWithBool:self.hasGuide]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGameId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.gameId] forKey: @"gameId"];
  }
  if (self.hasLevel) {
    [dictionary setObject: [NSNumber numberWithInteger:self.level] forKey: @"level"];
  }
  if (self.hasGameName) {
    [dictionary setObject: self.gameName forKey: @"gameName"];
  }
  if (self.hasAbilityName) {
    [dictionary setObject: self.abilityName forKey: @"abilityName"];
  }
  if (self.hasPicUrl) {
    [dictionary setObject: self.picUrl forKey: @"picUrl"];
  }
  if (self.hasStars) {
    [dictionary setObject: [NSNumber numberWithInteger:self.stars] forKey: @"stars"];
  }
  if (self.hasColor) {
    [dictionary setObject: self.color forKey: @"color"];
  }
  if (self.hasAbilityId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.abilityId] forKey: @"abilityId"];
  }
  if (self.hasHasGuide) {
    [dictionary setObject: [NSNumber numberWithBool:self.hasGuide] forKey: @"hasGuide"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBGameLevel class]]) {
    return NO;
  }
  XCSDPBGameLevel *otherMessage = other;
  return
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || self.gameId == otherMessage.gameId) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasGameName == otherMessage.hasGameName &&
      (!self.hasGameName || [self.gameName isEqual:otherMessage.gameName]) &&
      self.hasAbilityName == otherMessage.hasAbilityName &&
      (!self.hasAbilityName || [self.abilityName isEqual:otherMessage.abilityName]) &&
      self.hasPicUrl == otherMessage.hasPicUrl &&
      (!self.hasPicUrl || [self.picUrl isEqual:otherMessage.picUrl]) &&
      self.hasStars == otherMessage.hasStars &&
      (!self.hasStars || self.stars == otherMessage.stars) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || [self.color isEqual:otherMessage.color]) &&
      self.hasAbilityId == otherMessage.hasAbilityId &&
      (!self.hasAbilityId || self.abilityId == otherMessage.abilityId) &&
      self.hasHasGuide == otherMessage.hasHasGuide &&
      (!self.hasHasGuide || self.hasGuide == otherMessage.hasGuide) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.gameId] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasGameName) {
    hashCode = hashCode * 31 + [self.gameName hash];
  }
  if (self.hasAbilityName) {
    hashCode = hashCode * 31 + [self.abilityName hash];
  }
  if (self.hasPicUrl) {
    hashCode = hashCode * 31 + [self.picUrl hash];
  }
  if (self.hasStars) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stars] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [self.color hash];
  }
  if (self.hasAbilityId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.abilityId] hash];
  }
  if (self.hasHasGuide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasGuide] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBGameLevelBuilder()
@property (strong) XCSDPBGameLevel* resultGameLevel;
@end

@implementation XCSDPBGameLevelBuilder
@synthesize resultGameLevel;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGameLevel = [[XCSDPBGameLevel alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGameLevel;
}
- (XCSDPBGameLevelBuilder*) clear {
  self.resultGameLevel = [[XCSDPBGameLevel alloc] init];
  return self;
}
- (XCSDPBGameLevelBuilder*) clone {
  return [XCSDPBGameLevel builderWithPrototype:resultGameLevel];
}
- (XCSDPBGameLevel*) defaultInstance {
  return [XCSDPBGameLevel defaultInstance];
}
- (XCSDPBGameLevel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBGameLevel*) buildPartial {
  XCSDPBGameLevel* returnMe = resultGameLevel;
  self.resultGameLevel = nil;
  return returnMe;
}
- (XCSDPBGameLevelBuilder*) mergeFrom:(XCSDPBGameLevel*) other {
  if (other == [XCSDPBGameLevel defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasGameName) {
    [self setGameName:other.gameName];
  }
  if (other.hasAbilityName) {
    [self setAbilityName:other.abilityName];
  }
  if (other.hasPicUrl) {
    [self setPicUrl:other.picUrl];
  }
  if (other.hasStars) {
    [self setStars:other.stars];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  if (other.hasAbilityId) {
    [self setAbilityId:other.abilityId];
  }
  if (other.hasHasGuide) {
    [self setHasGuide:other.hasGuide];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBGameLevelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBGameLevelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGameId:[input readInt64]];
        break;
      }
      case 16: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 26: {
        [self setGameName:[input readString]];
        break;
      }
      case 34: {
        [self setAbilityName:[input readString]];
        break;
      }
      case 42: {
        [self setPicUrl:[input readString]];
        break;
      }
      case 48: {
        [self setStars:[input readInt32]];
        break;
      }
      case 58: {
        [self setColor:[input readString]];
        break;
      }
      case 64: {
        [self setAbilityId:[input readInt32]];
        break;
      }
      case 72: {
        [self setHasGuide:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return resultGameLevel.hasGameId;
}
- (SInt64) gameId {
  return resultGameLevel.gameId;
}
- (XCSDPBGameLevelBuilder*) setGameId:(SInt64) value {
  resultGameLevel.hasGameId = YES;
  resultGameLevel.gameId = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearGameId {
  resultGameLevel.hasGameId = NO;
  resultGameLevel.gameId = 0L;
  return self;
}
- (BOOL) hasLevel {
  return resultGameLevel.hasLevel;
}
- (SInt32) level {
  return resultGameLevel.level;
}
- (XCSDPBGameLevelBuilder*) setLevel:(SInt32) value {
  resultGameLevel.hasLevel = YES;
  resultGameLevel.level = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearLevel {
  resultGameLevel.hasLevel = NO;
  resultGameLevel.level = 0;
  return self;
}
- (BOOL) hasGameName {
  return resultGameLevel.hasGameName;
}
- (NSString*) gameName {
  return resultGameLevel.gameName;
}
- (XCSDPBGameLevelBuilder*) setGameName:(NSString*) value {
  resultGameLevel.hasGameName = YES;
  resultGameLevel.gameName = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearGameName {
  resultGameLevel.hasGameName = NO;
  resultGameLevel.gameName = @"";
  return self;
}
- (BOOL) hasAbilityName {
  return resultGameLevel.hasAbilityName;
}
- (NSString*) abilityName {
  return resultGameLevel.abilityName;
}
- (XCSDPBGameLevelBuilder*) setAbilityName:(NSString*) value {
  resultGameLevel.hasAbilityName = YES;
  resultGameLevel.abilityName = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearAbilityName {
  resultGameLevel.hasAbilityName = NO;
  resultGameLevel.abilityName = @"";
  return self;
}
- (BOOL) hasPicUrl {
  return resultGameLevel.hasPicUrl;
}
- (NSString*) picUrl {
  return resultGameLevel.picUrl;
}
- (XCSDPBGameLevelBuilder*) setPicUrl:(NSString*) value {
  resultGameLevel.hasPicUrl = YES;
  resultGameLevel.picUrl = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearPicUrl {
  resultGameLevel.hasPicUrl = NO;
  resultGameLevel.picUrl = @"";
  return self;
}
- (BOOL) hasStars {
  return resultGameLevel.hasStars;
}
- (SInt32) stars {
  return resultGameLevel.stars;
}
- (XCSDPBGameLevelBuilder*) setStars:(SInt32) value {
  resultGameLevel.hasStars = YES;
  resultGameLevel.stars = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearStars {
  resultGameLevel.hasStars = NO;
  resultGameLevel.stars = 0;
  return self;
}
- (BOOL) hasColor {
  return resultGameLevel.hasColor;
}
- (NSString*) color {
  return resultGameLevel.color;
}
- (XCSDPBGameLevelBuilder*) setColor:(NSString*) value {
  resultGameLevel.hasColor = YES;
  resultGameLevel.color = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearColor {
  resultGameLevel.hasColor = NO;
  resultGameLevel.color = @"";
  return self;
}
- (BOOL) hasAbilityId {
  return resultGameLevel.hasAbilityId;
}
- (SInt32) abilityId {
  return resultGameLevel.abilityId;
}
- (XCSDPBGameLevelBuilder*) setAbilityId:(SInt32) value {
  resultGameLevel.hasAbilityId = YES;
  resultGameLevel.abilityId = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearAbilityId {
  resultGameLevel.hasAbilityId = NO;
  resultGameLevel.abilityId = 0;
  return self;
}
- (BOOL) hasHasGuide {
  return resultGameLevel.hasHasGuide;
}
- (BOOL) hasGuide {
  return resultGameLevel.hasGuide;
}
- (XCSDPBGameLevelBuilder*) setHasGuide:(BOOL) value {
  resultGameLevel.hasHasGuide = YES;
  resultGameLevel.hasGuide = value;
  return self;
}
- (XCSDPBGameLevelBuilder*) clearHasGuide {
  resultGameLevel.hasHasGuide = NO;
  resultGameLevel.hasGuide = NO;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
