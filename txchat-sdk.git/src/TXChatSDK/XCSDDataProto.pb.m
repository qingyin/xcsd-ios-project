// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "XCSDDataProto.pb.h"
// @@protoc_insertion_point(imports)

@implementation XCSDPBXcsddataProtoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [XCSDPBXcsddataProtoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL XCSDPBEventTypeIsValidValue(XCSDPBEventType value) {
  switch (value) {
    case XCSDPBEventTypeAppLogin:
    case XCSDPBEventTypeAppLogout:
    case XCSDPBEventTypeChannelIn:
    case XCSDPBEventTypeChannelOut:
    case XCSDPBEventTypeGameIn:
    case XCSDPBEventTypeGameOut:
    case XCSDPBEventTypeLessonIn:
    case XCSDPBEventTypeLessonOut:
    case XCSDPBEventTypeArticleIn:
    case XCSDPBEventTypeArticleOut:
    case XCSDPBEventTypeSingleChat:
    case XCSDPBEventTypeGroupChat:
    case XCSDPBEventTypeTeacherGroupChat:
    case XCSDPBEventTypeUnifiedHomework:
    case XCSDPBEventTypeCustomizedHomework:
    case XCSDPBEventTypeCompletedTest:
    case XCSDPBEventTypeFeed:
    case XCSDPBEventTypeCommentFeed:
    case XCSDPBEventTypeLikeFeed:
    case XCSDPBEventTypeAskQuestion:
    case XCSDPBEventTypeAnswerQuestion:
    case XCSDPBEventTypeCommentAnswer:
    case XCSDPBEventTypeLikeAnswer:
    case XCSDPBEventTypeNotice:
    case XCSDPBEventTypeShareArticle:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromXCSDPBEventType(XCSDPBEventType value) {
  switch (value) {
    case XCSDPBEventTypeAppLogin:
      return @"XCSDPBEventTypeAppLogin";
    case XCSDPBEventTypeAppLogout:
      return @"XCSDPBEventTypeAppLogout";
    case XCSDPBEventTypeChannelIn:
      return @"XCSDPBEventTypeChannelIn";
    case XCSDPBEventTypeChannelOut:
      return @"XCSDPBEventTypeChannelOut";
    case XCSDPBEventTypeGameIn:
      return @"XCSDPBEventTypeGameIn";
    case XCSDPBEventTypeGameOut:
      return @"XCSDPBEventTypeGameOut";
    case XCSDPBEventTypeLessonIn:
      return @"XCSDPBEventTypeLessonIn";
    case XCSDPBEventTypeLessonOut:
      return @"XCSDPBEventTypeLessonOut";
    case XCSDPBEventTypeArticleIn:
      return @"XCSDPBEventTypeArticleIn";
    case XCSDPBEventTypeArticleOut:
      return @"XCSDPBEventTypeArticleOut";
    case XCSDPBEventTypeSingleChat:
      return @"XCSDPBEventTypeSingleChat";
    case XCSDPBEventTypeGroupChat:
      return @"XCSDPBEventTypeGroupChat";
    case XCSDPBEventTypeTeacherGroupChat:
      return @"XCSDPBEventTypeTeacherGroupChat";
    case XCSDPBEventTypeUnifiedHomework:
      return @"XCSDPBEventTypeUnifiedHomework";
    case XCSDPBEventTypeCustomizedHomework:
      return @"XCSDPBEventTypeCustomizedHomework";
    case XCSDPBEventTypeCompletedTest:
      return @"XCSDPBEventTypeCompletedTest";
    case XCSDPBEventTypeFeed:
      return @"XCSDPBEventTypeFeed";
    case XCSDPBEventTypeCommentFeed:
      return @"XCSDPBEventTypeCommentFeed";
    case XCSDPBEventTypeLikeFeed:
      return @"XCSDPBEventTypeLikeFeed";
    case XCSDPBEventTypeAskQuestion:
      return @"XCSDPBEventTypeAskQuestion";
    case XCSDPBEventTypeAnswerQuestion:
      return @"XCSDPBEventTypeAnswerQuestion";
    case XCSDPBEventTypeCommentAnswer:
      return @"XCSDPBEventTypeCommentAnswer";
    case XCSDPBEventTypeLikeAnswer:
      return @"XCSDPBEventTypeLikeAnswer";
    case XCSDPBEventTypeNotice:
      return @"XCSDPBEventTypeNotice";
    case XCSDPBEventTypeShareArticle:
      return @"XCSDPBEventTypeShareArticle";
    default:
      return nil;
  }
}

@interface XCSDPBEvent ()
@property SInt64 userId;
@property XCSDPBEventType eventType;
@property (strong) NSString* bid;
@property SInt64 timestamp;
@property (strong) NSString* extendedInfo;
@end

@implementation XCSDPBEvent

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasEventType {
  return !!hasEventType_;
}
- (void) setHasEventType:(BOOL) _value_ {
  hasEventType_ = !!_value_;
}
@synthesize eventType;
- (BOOL) hasBid {
  return !!hasBid_;
}
- (void) setHasBid:(BOOL) _value_ {
  hasBid_ = !!_value_;
}
@synthesize bid;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasExtendedInfo {
  return !!hasExtendedInfo_;
}
- (void) setHasExtendedInfo:(BOOL) _value_ {
  hasExtendedInfo_ = !!_value_;
}
@synthesize extendedInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.eventType = XCSDPBEventTypeAppLogin;
    self.bid = @"";
    self.timestamp = 0L;
    self.extendedInfo = @"";
  }
  return self;
}
static XCSDPBEvent* defaultXCSDPBEventInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBEvent class]) {
    defaultXCSDPBEventInstance = [[XCSDPBEvent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBEventInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasEventType) {
    return NO;
  }
  if (!self.hasTimestamp) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt64:1 value:self.userId];
  }
  if (self.hasEventType) {
    [output writeEnum:2 value:self.eventType];
  }
  if (self.hasBid) {
    [output writeString:3 value:self.bid];
  }
  if (self.hasTimestamp) {
    [output writeInt64:4 value:self.timestamp];
  }
  if (self.hasExtendedInfo) {
    [output writeString:5 value:self.extendedInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeInt64Size(1, self.userId);
  }
  if (self.hasEventType) {
    size_ += computeEnumSize(2, self.eventType);
  }
  if (self.hasBid) {
    size_ += computeStringSize(3, self.bid);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(4, self.timestamp);
  }
  if (self.hasExtendedInfo) {
    size_ += computeStringSize(5, self.extendedInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBEvent*) parseFromData:(NSData*) data {
  return (XCSDPBEvent*)[[[XCSDPBEvent builder] mergeFromData:data] build];
}
+ (XCSDPBEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBEvent*)[[[XCSDPBEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBEvent*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBEvent*)[[[XCSDPBEvent builder] mergeFromInputStream:input] build];
}
+ (XCSDPBEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBEvent*)[[[XCSDPBEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBEvent*)[[[XCSDPBEvent builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBEvent*)[[[XCSDPBEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBEventBuilder*) builder {
  return [[XCSDPBEventBuilder alloc] init];
}
+ (XCSDPBEventBuilder*) builderWithPrototype:(XCSDPBEvent*) prototype {
  return [[XCSDPBEvent builder] mergeFrom:prototype];
}
- (XCSDPBEventBuilder*) builder {
  return [XCSDPBEvent builder];
}
- (XCSDPBEventBuilder*) toBuilder {
  return [XCSDPBEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasEventType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventType", NSStringFromXCSDPBEventType(self.eventType)];
  }
  if (self.hasBid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bid", self.bid];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasExtendedInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extendedInfo", self.extendedInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasEventType) {
    [dictionary setObject: @(self.eventType) forKey: @"eventType"];
  }
  if (self.hasBid) {
    [dictionary setObject: self.bid forKey: @"bid"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasExtendedInfo) {
    [dictionary setObject: self.extendedInfo forKey: @"extendedInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBEvent class]]) {
    return NO;
  }
  XCSDPBEvent *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasEventType == otherMessage.hasEventType &&
      (!self.hasEventType || self.eventType == otherMessage.eventType) &&
      self.hasBid == otherMessage.hasBid &&
      (!self.hasBid || [self.bid isEqual:otherMessage.bid]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasExtendedInfo == otherMessage.hasExtendedInfo &&
      (!self.hasExtendedInfo || [self.extendedInfo isEqual:otherMessage.extendedInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasEventType) {
    hashCode = hashCode * 31 + self.eventType;
  }
  if (self.hasBid) {
    hashCode = hashCode * 31 + [self.bid hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasExtendedInfo) {
    hashCode = hashCode * 31 + [self.extendedInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBEventBuilder()
@property (strong) XCSDPBEvent* resultEvent;
@end

@implementation XCSDPBEventBuilder
@synthesize resultEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEvent = [[XCSDPBEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEvent;
}
- (XCSDPBEventBuilder*) clear {
  self.resultEvent = [[XCSDPBEvent alloc] init];
  return self;
}
- (XCSDPBEventBuilder*) clone {
  return [XCSDPBEvent builderWithPrototype:resultEvent];
}
- (XCSDPBEvent*) defaultInstance {
  return [XCSDPBEvent defaultInstance];
}
- (XCSDPBEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBEvent*) buildPartial {
  XCSDPBEvent* returnMe = resultEvent;
  self.resultEvent = nil;
  return returnMe;
}
- (XCSDPBEventBuilder*) mergeFrom:(XCSDPBEvent*) other {
  if (other == [XCSDPBEvent defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasEventType) {
    [self setEventType:other.eventType];
  }
  if (other.hasBid) {
    [self setBid:other.bid];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasExtendedInfo) {
    [self setExtendedInfo:other.extendedInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt64]];
        break;
      }
      case 16: {
        XCSDPBEventType value = (XCSDPBEventType)[input readEnum];
        if (XCSDPBEventTypeIsValidValue(value)) {
          [self setEventType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setBid:[input readString]];
        break;
      }
      case 32: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 42: {
        [self setExtendedInfo:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultEvent.hasUserId;
}
- (SInt64) userId {
  return resultEvent.userId;
}
- (XCSDPBEventBuilder*) setUserId:(SInt64) value {
  resultEvent.hasUserId = YES;
  resultEvent.userId = value;
  return self;
}
- (XCSDPBEventBuilder*) clearUserId {
  resultEvent.hasUserId = NO;
  resultEvent.userId = 0L;
  return self;
}
- (BOOL) hasEventType {
  return resultEvent.hasEventType;
}
- (XCSDPBEventType) eventType {
  return resultEvent.eventType;
}
- (XCSDPBEventBuilder*) setEventType:(XCSDPBEventType) value {
  resultEvent.hasEventType = YES;
  resultEvent.eventType = value;
  return self;
}
- (XCSDPBEventBuilder*) clearEventType {
  resultEvent.hasEventType = NO;
  resultEvent.eventType = XCSDPBEventTypeAppLogin;
  return self;
}
- (BOOL) hasBid {
  return resultEvent.hasBid;
}
- (NSString*) bid {
  return resultEvent.bid;
}
- (XCSDPBEventBuilder*) setBid:(NSString*) value {
  resultEvent.hasBid = YES;
  resultEvent.bid = value;
  return self;
}
- (XCSDPBEventBuilder*) clearBid {
  resultEvent.hasBid = NO;
  resultEvent.bid = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultEvent.hasTimestamp;
}
- (SInt64) timestamp {
  return resultEvent.timestamp;
}
- (XCSDPBEventBuilder*) setTimestamp:(SInt64) value {
  resultEvent.hasTimestamp = YES;
  resultEvent.timestamp = value;
  return self;
}
- (XCSDPBEventBuilder*) clearTimestamp {
  resultEvent.hasTimestamp = NO;
  resultEvent.timestamp = 0L;
  return self;
}
- (BOOL) hasExtendedInfo {
  return resultEvent.hasExtendedInfo;
}
- (NSString*) extendedInfo {
  return resultEvent.extendedInfo;
}
- (XCSDPBEventBuilder*) setExtendedInfo:(NSString*) value {
  resultEvent.hasExtendedInfo = YES;
  resultEvent.extendedInfo = value;
  return self;
}
- (XCSDPBEventBuilder*) clearExtendedInfo {
  resultEvent.hasExtendedInfo = NO;
  resultEvent.extendedInfo = @"";
  return self;
}
@end

@interface XCSDPBReportEventRequest ()
@property SInt64 serialNo;
@property (strong) NSMutableArray * eventListArray;
@property SInt64 sendTime;
@end

@implementation XCSDPBReportEventRequest

- (BOOL) hasSerialNo {
  return !!hasSerialNo_;
}
- (void) setHasSerialNo:(BOOL) _value_ {
  hasSerialNo_ = !!_value_;
}
@synthesize serialNo;
@synthesize eventListArray;
@dynamic eventList;
- (BOOL) hasSendTime {
  return !!hasSendTime_;
}
- (void) setHasSendTime:(BOOL) _value_ {
  hasSendTime_ = !!_value_;
}
@synthesize sendTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.serialNo = 0L;
    self.sendTime = 0L;
  }
  return self;
}
static XCSDPBReportEventRequest* defaultXCSDPBReportEventRequestInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBReportEventRequest class]) {
    defaultXCSDPBReportEventRequestInstance = [[XCSDPBReportEventRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBReportEventRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBReportEventRequestInstance;
}
- (NSArray *)eventList {
  return eventListArray;
}
- (XCSDPBEvent*)eventListAtIndex:(NSUInteger)index {
  return [eventListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSerialNo) {
    return NO;
  }
  __block BOOL isIniteventList = YES;
   [self.eventList enumerateObjectsUsingBlock:^(XCSDPBEvent *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isIniteventList = NO;
      *stop = YES;
    }
  }];
  if (!isIniteventList) return isIniteventList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSerialNo) {
    [output writeInt64:1 value:self.serialNo];
  }
  [self.eventListArray enumerateObjectsUsingBlock:^(XCSDPBEvent *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasSendTime) {
    [output writeInt64:3 value:self.sendTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSerialNo) {
    size_ += computeInt64Size(1, self.serialNo);
  }
  [self.eventListArray enumerateObjectsUsingBlock:^(XCSDPBEvent *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasSendTime) {
    size_ += computeInt64Size(3, self.sendTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBReportEventRequest*) parseFromData:(NSData*) data {
  return (XCSDPBReportEventRequest*)[[[XCSDPBReportEventRequest builder] mergeFromData:data] build];
}
+ (XCSDPBReportEventRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBReportEventRequest*)[[[XCSDPBReportEventRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBReportEventRequest*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBReportEventRequest*)[[[XCSDPBReportEventRequest builder] mergeFromInputStream:input] build];
}
+ (XCSDPBReportEventRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBReportEventRequest*)[[[XCSDPBReportEventRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBReportEventRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBReportEventRequest*)[[[XCSDPBReportEventRequest builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBReportEventRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBReportEventRequest*)[[[XCSDPBReportEventRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBReportEventRequestBuilder*) builder {
  return [[XCSDPBReportEventRequestBuilder alloc] init];
}
+ (XCSDPBReportEventRequestBuilder*) builderWithPrototype:(XCSDPBReportEventRequest*) prototype {
  return [[XCSDPBReportEventRequest builder] mergeFrom:prototype];
}
- (XCSDPBReportEventRequestBuilder*) builder {
  return [XCSDPBReportEventRequest builder];
}
- (XCSDPBReportEventRequestBuilder*) toBuilder {
  return [XCSDPBReportEventRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSerialNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serialNo", [NSNumber numberWithLongLong:self.serialNo]];
  }
  [self.eventListArray enumerateObjectsUsingBlock:^(XCSDPBEvent *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"eventList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendTime", [NSNumber numberWithLongLong:self.sendTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSerialNo) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.serialNo] forKey: @"serialNo"];
  }
  for (XCSDPBEvent* element in self.eventListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"eventList"];
  }
  if (self.hasSendTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sendTime] forKey: @"sendTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBReportEventRequest class]]) {
    return NO;
  }
  XCSDPBReportEventRequest *otherMessage = other;
  return
      self.hasSerialNo == otherMessage.hasSerialNo &&
      (!self.hasSerialNo || self.serialNo == otherMessage.serialNo) &&
      [self.eventListArray isEqualToArray:otherMessage.eventListArray] &&
      self.hasSendTime == otherMessage.hasSendTime &&
      (!self.hasSendTime || self.sendTime == otherMessage.sendTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSerialNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serialNo] hash];
  }
  [self.eventListArray enumerateObjectsUsingBlock:^(XCSDPBEvent *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sendTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBReportEventRequestBuilder()
@property (strong) XCSDPBReportEventRequest* resultReportEventRequest;
@end

@implementation XCSDPBReportEventRequestBuilder
@synthesize resultReportEventRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReportEventRequest = [[XCSDPBReportEventRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReportEventRequest;
}
- (XCSDPBReportEventRequestBuilder*) clear {
  self.resultReportEventRequest = [[XCSDPBReportEventRequest alloc] init];
  return self;
}
- (XCSDPBReportEventRequestBuilder*) clone {
  return [XCSDPBReportEventRequest builderWithPrototype:resultReportEventRequest];
}
- (XCSDPBReportEventRequest*) defaultInstance {
  return [XCSDPBReportEventRequest defaultInstance];
}
- (XCSDPBReportEventRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBReportEventRequest*) buildPartial {
  XCSDPBReportEventRequest* returnMe = resultReportEventRequest;
  self.resultReportEventRequest = nil;
  return returnMe;
}
- (XCSDPBReportEventRequestBuilder*) mergeFrom:(XCSDPBReportEventRequest*) other {
  if (other == [XCSDPBReportEventRequest defaultInstance]) {
    return self;
  }
  if (other.hasSerialNo) {
    [self setSerialNo:other.serialNo];
  }
  if (other.eventListArray.count > 0) {
    if (resultReportEventRequest.eventListArray == nil) {
      resultReportEventRequest.eventListArray = [[NSMutableArray alloc] initWithArray:other.eventListArray];
    } else {
      [resultReportEventRequest.eventListArray addObjectsFromArray:other.eventListArray];
    }
  }
  if (other.hasSendTime) {
    [self setSendTime:other.sendTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBReportEventRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBReportEventRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSerialNo:[input readInt64]];
        break;
      }
      case 18: {
        XCSDPBEventBuilder* subBuilder = [XCSDPBEvent builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEventList:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setSendTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasSerialNo {
  return resultReportEventRequest.hasSerialNo;
}
- (SInt64) serialNo {
  return resultReportEventRequest.serialNo;
}
- (XCSDPBReportEventRequestBuilder*) setSerialNo:(SInt64) value {
  resultReportEventRequest.hasSerialNo = YES;
  resultReportEventRequest.serialNo = value;
  return self;
}
- (XCSDPBReportEventRequestBuilder*) clearSerialNo {
  resultReportEventRequest.hasSerialNo = NO;
  resultReportEventRequest.serialNo = 0L;
  return self;
}
- (NSMutableArray *)eventList {
  return resultReportEventRequest.eventListArray;
}
- (XCSDPBEvent*)eventListAtIndex:(NSUInteger)index {
  return [resultReportEventRequest eventListAtIndex:index];
}
- (XCSDPBReportEventRequestBuilder *)addEventList:(XCSDPBEvent*)value {
  if (resultReportEventRequest.eventListArray == nil) {
    resultReportEventRequest.eventListArray = [[NSMutableArray alloc]init];
  }
  [resultReportEventRequest.eventListArray addObject:value];
  return self;
}
- (XCSDPBReportEventRequestBuilder *)setEventListArray:(NSArray *)array {
  resultReportEventRequest.eventListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (XCSDPBReportEventRequestBuilder *)clearEventList {
  resultReportEventRequest.eventListArray = nil;
  return self;
}
- (BOOL) hasSendTime {
  return resultReportEventRequest.hasSendTime;
}
- (SInt64) sendTime {
  return resultReportEventRequest.sendTime;
}
- (XCSDPBReportEventRequestBuilder*) setSendTime:(SInt64) value {
  resultReportEventRequest.hasSendTime = YES;
  resultReportEventRequest.sendTime = value;
  return self;
}
- (XCSDPBReportEventRequestBuilder*) clearSendTime {
  resultReportEventRequest.hasSendTime = NO;
  resultReportEventRequest.sendTime = 0L;
  return self;
}
@end

@interface XCSDPBReportEventResponse ()
@property SInt32 result;
@property (strong) NSString* msg;
@property SInt64 serialNo;
@property SInt64 sysTimestamp;
@end

@implementation XCSDPBReportEventResponse

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) _value_ {
  hasResult_ = !!_value_;
}
@synthesize result;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (BOOL) hasSerialNo {
  return !!hasSerialNo_;
}
- (void) setHasSerialNo:(BOOL) _value_ {
  hasSerialNo_ = !!_value_;
}
@synthesize serialNo;
- (BOOL) hasSysTimestamp {
  return !!hasSysTimestamp_;
}
- (void) setHasSysTimestamp:(BOOL) _value_ {
  hasSysTimestamp_ = !!_value_;
}
@synthesize sysTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.result = 0;
    self.msg = @"";
    self.serialNo = 0L;
    self.sysTimestamp = 0L;
  }
  return self;
}
static XCSDPBReportEventResponse* defaultXCSDPBReportEventResponseInstance = nil;
+ (void) initialize {
  if (self == [XCSDPBReportEventResponse class]) {
    defaultXCSDPBReportEventResponseInstance = [[XCSDPBReportEventResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXCSDPBReportEventResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultXCSDPBReportEventResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResult) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeInt32:1 value:self.result];
  }
  if (self.hasMsg) {
    [output writeString:2 value:self.msg];
  }
  if (self.hasSerialNo) {
    [output writeInt64:3 value:self.serialNo];
  }
  if (self.hasSysTimestamp) {
    [output writeInt64:4 value:self.sysTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeInt32Size(1, self.result);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(2, self.msg);
  }
  if (self.hasSerialNo) {
    size_ += computeInt64Size(3, self.serialNo);
  }
  if (self.hasSysTimestamp) {
    size_ += computeInt64Size(4, self.sysTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XCSDPBReportEventResponse*) parseFromData:(NSData*) data {
  return (XCSDPBReportEventResponse*)[[[XCSDPBReportEventResponse builder] mergeFromData:data] build];
}
+ (XCSDPBReportEventResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBReportEventResponse*)[[[XCSDPBReportEventResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBReportEventResponse*) parseFromInputStream:(NSInputStream*) input {
  return (XCSDPBReportEventResponse*)[[[XCSDPBReportEventResponse builder] mergeFromInputStream:input] build];
}
+ (XCSDPBReportEventResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBReportEventResponse*)[[[XCSDPBReportEventResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBReportEventResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XCSDPBReportEventResponse*)[[[XCSDPBReportEventResponse builder] mergeFromCodedInputStream:input] build];
}
+ (XCSDPBReportEventResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XCSDPBReportEventResponse*)[[[XCSDPBReportEventResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XCSDPBReportEventResponseBuilder*) builder {
  return [[XCSDPBReportEventResponseBuilder alloc] init];
}
+ (XCSDPBReportEventResponseBuilder*) builderWithPrototype:(XCSDPBReportEventResponse*) prototype {
  return [[XCSDPBReportEventResponse builder] mergeFrom:prototype];
}
- (XCSDPBReportEventResponseBuilder*) builder {
  return [XCSDPBReportEventResponse builder];
}
- (XCSDPBReportEventResponseBuilder*) toBuilder {
  return [XCSDPBReportEventResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInteger:self.result]];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasSerialNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serialNo", [NSNumber numberWithLongLong:self.serialNo]];
  }
  if (self.hasSysTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sysTimestamp", [NSNumber numberWithLongLong:self.sysTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResult) {
    [dictionary setObject: [NSNumber numberWithInteger:self.result] forKey: @"result"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  if (self.hasSerialNo) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.serialNo] forKey: @"serialNo"];
  }
  if (self.hasSysTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sysTimestamp] forKey: @"sysTimestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XCSDPBReportEventResponse class]]) {
    return NO;
  }
  XCSDPBReportEventResponse *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasSerialNo == otherMessage.hasSerialNo &&
      (!self.hasSerialNo || self.serialNo == otherMessage.serialNo) &&
      self.hasSysTimestamp == otherMessage.hasSysTimestamp &&
      (!self.hasSysTimestamp || self.sysTimestamp == otherMessage.sysTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.result] hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasSerialNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serialNo] hash];
  }
  if (self.hasSysTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sysTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XCSDPBReportEventResponseBuilder()
@property (strong) XCSDPBReportEventResponse* resultReportEventResponse;
@end

@implementation XCSDPBReportEventResponseBuilder
@synthesize resultReportEventResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReportEventResponse = [[XCSDPBReportEventResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReportEventResponse;
}
- (XCSDPBReportEventResponseBuilder*) clear {
  self.resultReportEventResponse = [[XCSDPBReportEventResponse alloc] init];
  return self;
}
- (XCSDPBReportEventResponseBuilder*) clone {
  return [XCSDPBReportEventResponse builderWithPrototype:resultReportEventResponse];
}
- (XCSDPBReportEventResponse*) defaultInstance {
  return [XCSDPBReportEventResponse defaultInstance];
}
- (XCSDPBReportEventResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XCSDPBReportEventResponse*) buildPartial {
  XCSDPBReportEventResponse* returnMe = resultReportEventResponse;
  self.resultReportEventResponse = nil;
  return returnMe;
}
- (XCSDPBReportEventResponseBuilder*) mergeFrom:(XCSDPBReportEventResponse*) other {
  if (other == [XCSDPBReportEventResponse defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasSerialNo) {
    [self setSerialNo:other.serialNo];
  }
  if (other.hasSysTimestamp) {
    [self setSysTimestamp:other.sysTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XCSDPBReportEventResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XCSDPBReportEventResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResult:[input readInt32]];
        break;
      }
      case 18: {
        [self setMsg:[input readString]];
        break;
      }
      case 24: {
        [self setSerialNo:[input readInt64]];
        break;
      }
      case 32: {
        [self setSysTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return resultReportEventResponse.hasResult;
}
- (SInt32) result {
  return resultReportEventResponse.result;
}
- (XCSDPBReportEventResponseBuilder*) setResult:(SInt32) value {
  resultReportEventResponse.hasResult = YES;
  resultReportEventResponse.result = value;
  return self;
}
- (XCSDPBReportEventResponseBuilder*) clearResult {
  resultReportEventResponse.hasResult = NO;
  resultReportEventResponse.result = 0;
  return self;
}
- (BOOL) hasMsg {
  return resultReportEventResponse.hasMsg;
}
- (NSString*) msg {
  return resultReportEventResponse.msg;
}
- (XCSDPBReportEventResponseBuilder*) setMsg:(NSString*) value {
  resultReportEventResponse.hasMsg = YES;
  resultReportEventResponse.msg = value;
  return self;
}
- (XCSDPBReportEventResponseBuilder*) clearMsg {
  resultReportEventResponse.hasMsg = NO;
  resultReportEventResponse.msg = @"";
  return self;
}
- (BOOL) hasSerialNo {
  return resultReportEventResponse.hasSerialNo;
}
- (SInt64) serialNo {
  return resultReportEventResponse.serialNo;
}
- (XCSDPBReportEventResponseBuilder*) setSerialNo:(SInt64) value {
  resultReportEventResponse.hasSerialNo = YES;
  resultReportEventResponse.serialNo = value;
  return self;
}
- (XCSDPBReportEventResponseBuilder*) clearSerialNo {
  resultReportEventResponse.hasSerialNo = NO;
  resultReportEventResponse.serialNo = 0L;
  return self;
}
- (BOOL) hasSysTimestamp {
  return resultReportEventResponse.hasSysTimestamp;
}
- (SInt64) sysTimestamp {
  return resultReportEventResponse.sysTimestamp;
}
- (XCSDPBReportEventResponseBuilder*) setSysTimestamp:(SInt64) value {
  resultReportEventResponse.hasSysTimestamp = YES;
  resultReportEventResponse.sysTimestamp = value;
  return self;
}
- (XCSDPBReportEventResponseBuilder*) clearSysTimestamp {
  resultReportEventResponse.hasSysTimestamp = NO;
  resultReportEventResponse.sysTimestamp = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
